<!doctype html>
<html>
<head>
    <title>IRCHelp.org &mdash; Untitled Page</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="description" content="Comprehensive information on everything Internet Relay Chat" />
    <meta name="author" content="irchelpers" />
    <meta name="generator" content="PieCrust 1.3.0-dev" />
    <meta name="template-engine" content="Twig" />
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,
      initial-scale=1.0">
    <!-- Le styles -->
    <link href="/css/bootstrap.css" rel="stylesheet">
    <style type="text/css">
      body {
        padding-top: 60px;
        padding-bottom: 40px;
      }
    </style>
    <link href="/css/bootstrap-responsive.css" rel="stylesheet">
    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <!-- Fav and touch icons -->
    <link rel="apple-touch-icon-precomposed" sizes="144x144"
      href="/ico/apple-touch-icon-144-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114"
      href="/ico/apple-touch-icon-114-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="72x72"
      href="/ico/apple-touch-icon-72-precomposed.png">
    <link rel="apple-touch-icon-precomposed"
      href="/ico/apple-touch-icon-57-precomposed.png">
    <link rel="shortcut icon" href="/ico/favicon.png">
</head>
<body>
    <!--Start of navigation-->
    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container"> <a class="btn btn-navbar"
            data-toggle="collapse" data-target=".nav-collapse"> <span
              class="icon-bar"></span> <span class="icon-bar"></span> <span
              class="icon-bar"></span> </a> <a class="brand" href="/">#irchelp</a>
          <div class="nav-collapse collapse">
            <ul class="nav">
              <li class="active"><a href="/">Home</a></li>
              <li><a href="/irchelp/credit.html">About</a></li>
              <li class="dropdown"> <a href="/irchelp/clients" class="dropdown-toggle"
                  data-toggle="dropdown">Clients </a>
                <ul class="dropdown-menu">
                  <li><a href="/irchelp/clients">All Clients</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Windows</li>
                  <li><a href="/irchelp/clients/windows/mirc">mIRC</a></li>
                  <li><a href="/irchelp/clients/windows/xchat">XChat</a></li>
                  <li><a href="/irchelp/clients/windows">All Windows Clients</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">MacOS X</li>
                  <li><a href="/irchelp/clients/mac/textual.html">Textual</a></li>
                  <li><a href="/irchelp/clients/mac/colloquy.html">Colloquy</a></li>
                  <li><a href="/irchelp/clients/mac/snak.html">Snak</a></li>
                  <li><a href="/irchelp/clients/mac">All MacOS X Clients</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Linux/Unix Terminal</li>
                  <li><a href="/irchelp/clients/unix/irssi">irssi</a></li>
                  <li><a href="/irchelp/clients/unix/epic.html">EPIC</a></li>
                  <li><a href="/irchelp/clients/unix/ircii">ircII</a></li>
                  <li><a href="/irchelp/clients/unix/index.html#terminal">All Linux/Unix Terminal Clients</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Linux/Unix Graphical</li>
                  <li><a href="/irchelp/clients/unix/xchat.html">XChat</a></li>
                  <li><a href="/irchelp/clients/unix/konversation.html">Konversation</a></li>
                  <li><a href="/irchelp/clients/unix/index.html#gui">All Linux/Unix Graphical Clients</a></li>
                  <li class="nav-header">Smartphones</li>
                  <li><a href="/irchelp/clients/mobile/android">Clients for Android</a></li>
                  <li><a href="/irchelp/clients/mobile/ios">Clients for iOS</a></li>
                  <li><a href="/irchelp/clients/mobile">All Smartphone Clients</a></li>
                  <li class="nav-header">Other OS and Crossplatform</li>
                  <li><a href="/irchelp/clients/cross/java">Clients writting in Java</a></li>
                  <li><a href="/irchelp/clients/cross">Other Crossplatform Clients</a></li>
                  <li><a href="/irchelp/clients/otheros">Clients for other Operating Systems</a></li>
                  <li><a href="/irchelp/clients/webclients.html">Web-based clients</a></li>

                </ul>
              </li>
              <li class="dropdown"> <a href="/irchelp/networks" class="dropdown-toggle"
                  data-toggle="dropdown">Networks </a>
                <ul class="dropdown-menu">
                  <li><a href="/irchelp/networks/popular.html">Major Networks</a></li>
                  <li><a href="/irchelp/networks/regional.html">Regional Networks</a></li>
                  <li><a href="/irchelp/networks/topical.html">Topical Networks</a></li>
                  <li><a href="/irchelp/networks">All Networks</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Major Networks</li>
                  <li><a href="/irchelp/networks/efnet/">EFNet</a></li>
                  <li><a href="/irchelp/networks/ircnet.html">IRCnet</a></li>
                  <li><a href="/irchelp/networks/undernet.html">Undernet</a></li>
                  <li><a href="/irchelp/networks/dalnet.html">Dalnet</a></li>
                  <li><a href="/irchelp/networks/quakenet.html">Quakenet</a></li>
                  <li><a href="/irchelp/networks/freenode.html">Freenode</a></li>
                </ul>
              </li>
              <li class="dropdown"> <a href="/irchelp/security" class="dropdown-toggle"
                  data-toggle="dropdown">Security </a>
                <ul class="dropdown-menu">
                  <li><a href="/irchelp/security">General Security</a></li>
                  <li><a href="/irchelp/security/privacy.html">Privacy</a></li>
                  <li><a href="/irchelp/security/nuke.html">Denial of Service</a></li>
                  <li><a href="/irchelp/security/trojan.html">Trojan Horses and Other Malware</a></li>
                  <li><a href="/irchelp/security/socialeng.html">Social Engineering</a></li>
                </ul>
              </li>
              <li class="dropdown"> <a href="/irchelp/ircd" class="dropdown-toggle"
                  data-toggle="dropdown">Servers </a>
                <ul class="dropdown-menu">
                  <li><a href="/irchelp/ircd">General ircd information</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">EFNet IRCDs</li>
                  <li><a href="/irchelp/ircd/ratbox">ircd-ratbox</a></li>
                  <li><a href="/irchelp/ircd/hybrid">ircd-hybrid</a></li>
                </ul>
              </li>
              <li class="dropdown"> <a href="#" class="dropdown-toggle"
                  data-toggle="dropdown">FAQs </a>
                <ul class="dropdown-menu">
                  <li><a href="/irchelp/new2irc.html">New user introduction</a></li>
<!--
                  <li><a href="#">Another action</a></li>
                  <li><a href="#">Something else here</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Nav header</li>
                  <li><a href="#">Separated link</a></li>
                  <li><a href="#">One more separated link</a></li>
-->
                </ul>
              </li>
              <li class="dropdown"> <a href="/irchelp/library.html" class="dropdown-toggle"
                  data-toggle="dropdown">Library </a>
                <ul class="dropdown-menu">
                  <li><a href="/irchelp/library.html">Index</a></li>
<!--
                  <li><a href="#">Another action</a></li>
                  <li><a href="#">Something else here</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Nav header</li>
                  <li><a href="#">Separated link</a></li>
                  <li><a href="#">One more separated link</a></li>
-->
                </ul>
              </li>
            </ul>
            <form class="navbar-form pull-right"> <input class="span2"
                placeholder="Search" type="text"> <button type="submit"
                class="btn">Search</button> </form>
          </div>
          <!--/.nav-collapse --> </div>
      </div>
    </div>
<!--end of navigation-->

    <div id="container" class="container">
<!--
                        <h1><a href="/">Untitled Page</a></h1>
            -->        
        
            <div class="content">
                                <p>Network Working Group                                      J. Oikarinen
Request for Comments: 1459                                      D. Reed
                                                               May 1993</p>

<pre><code>                  Internet Relay Chat Protocol
</code></pre>

<p>Status of This Memo</p>

<p>This memo defines an Experimental Protocol for the Internet
   community.  Discussion and suggestions for improvement are requested.
   Please refer to the current edition of the &#8220;IAB Official Protocol
   Standards&#8221; for the standardization state and status of this protocol.
   Distribution of this memo is unlimited.</p>

<p>Abstract</p>

<p>The IRC protocol was developed over the last 4 years since it was
   first implemented as a means for users on a BBS to chat amongst
   themselves.  Now it supports a world-wide network of servers and
   clients, and is stringing to cope with growth. Over the past 2 years,
   the average number of users connected to the main IRC network has
   grown by a factor of 10.</p>

<p>The IRC protocol is a text-based protocol, with the simplest client
   being any socket program capable of connecting to the server.</p>

<p>Table of Contents</p>

<ol>
<li>INTRODUCTION &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..    4
  1.1  Servers &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    4
  1.2  Clients &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    5
     1.2.1 Operators &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    5
  1.3 Channels &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    5
  1.3.1  Channel Operators &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    6</li>
<li>THE IRC SPECIFICATION &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    7
  2.1 Overview &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    7
  2.2 Character codes &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..    7
  2.3 Messages &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;    7
     2.3.1  Message format in &#8216;pseudo&#8217; BNF &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..    8
  2.4 Numeric replies &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   10</li>
<li>IRC Concepts &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   10
  3.1 One-to-one communication &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   10
  3.2 One-to-many &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   11
     3.2.1 To a list &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   11
     3.2.2 To a group (channel) &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   11
     3.2.3 To a host/server mask &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   12
  3.3 One to all &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   12</li>
</ol>

<p>Oikarinen &amp; Reed                                                [Page 1]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>     3.3.1 Client to Client ...................................   12
     3.3.2 Clients to Server ..................................   12
     3.3.3 Server to Server ...................................   12
</code></pre>

<p>4. MESSAGE DETAILS &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   13
      4.1 Connection Registration &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   13
         4.1.1 Password message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   14
         4.1.2 Nickname message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   14
         4.1.3 User message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   15
         4.1.4 Server message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   16
         4.1.5 Operator message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   17
         4.1.6 Quit message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   17
         4.1.7 Server Quit message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   18
      4.2 Channel operations &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   19
         4.2.1 Join message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   19
         4.2.2 Part message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   20
         4.2.3 Mode message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   21
            4.2.3.1 Channel modes &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   21
            4.2.3.2 User modes &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   22
         4.2.4 Topic message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   23
         4.2.5 Names message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   24
         4.2.6 List message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   24
         4.2.7 Invite message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   25
         4.2.8 Kick message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   25
      4.3 Server queries and commands &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   26
         4.3.1 Version message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   26
         4.3.2 Stats message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   27
         4.3.3 Links message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   28
         4.3.4 Time message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   29
         4.3.5 Connect message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   29
         4.3.6 Trace message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   30
         4.3.7 Admin message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   31
         4.3.8 Info message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   31
      4.4 Sending messages &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   32
         4.4.1 Private messages &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   32
         4.4.2 Notice messages &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   33
      4.5 User-based queries &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   33
         4.5.1 Who query &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   33
         4.5.2 Whois query &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   34
         4.5.3 Whowas message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   35
      4.6 Miscellaneous messages &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   35
         4.6.1 Kill message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   36
         4.6.2 Ping message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   37
         4.6.3 Pong message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   37
         4.6.4 Error message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   38
   5. OPTIONAL MESSAGES &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   38
      5.1 Away message &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   38
      5.2 Rehash command &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   39
      5.3 Restart command &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   39</p>

<p>Oikarinen &amp; Reed                                                [Page 2]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>  5.4 Summon message ..........................................   40
  5.5 Users message ...........................................   40
  5.6 Operwall command ........................................   41
  5.7 Userhost message ........................................   42
  5.8 Ison message ............................................   42
</code></pre>

<p>6. REPLIES &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   43
      6.1 Error Replies &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   43
      6.2 Command responses &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   48
      6.3 Reserved numerics &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   56
   7. Client and server authentication &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   56
   8. Current Implementations Details &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   56
      8.1 Network protocol: TCP &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   57
         8.1.1 Support of Unix sockets &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   57
      8.2 Command Parsing &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   57
      8.3 Message delivery &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   57
      8.4 Connection &#8216;Liveness&#8217; &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   58
      8.5 Establishing a server-client connection &#8230;&#8230;&#8230;&#8230;&#8230;..   58
      8.6 Establishing a server-server connection &#8230;&#8230;&#8230;&#8230;&#8230;..   58
         8.6.1 State information exchange when connecting &#8230;&#8230;&#8230;   59
      8.7 Terminating server-client connections &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   59
      8.8 Terminating server-server connections &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   59
      8.9 Tracking nickname changes &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   60
      8.10 Flood control of clients &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   60
      8.11 Non-blocking lookups &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   61
         8.11.1 Hostname (DNS) lookups &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   61
         8.11.2 Username (Ident) lookups &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   61
      8.12 Configuration file &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   61
         8.12.1 Allowing clients to connect &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   62
         8.12.2 Operators &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   62
         8.12.3 Allowing servers to connect &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   62
         8.12.4 Administrivia &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   63
      8.13 Channel membership &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   63
   9. Current problems &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   63
      9.1 Scalability &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   63
      9.2 Labels &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   63
         9.2.1 Nicknames &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   63
         9.2.2 Channels &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   64
         9.2.3 Servers &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   64
      9.3 Algorithms &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.   64
   10. Support and availability &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   64
   11. Security Considerations &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;   65
   12. Authors&#8217; Addresses &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..   65</p>

<p>Oikarinen &amp; Reed                                                [Page 3]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<ol>
<li><p>INTRODUCTION</p>

<p>The IRC (Internet Relay Chat) protocol has been designed over a
number of years for use with text based conferencing.  This document
describes the current IRC protocol.</p>

<p>The IRC protocol has been developed on systems using the TCP/IP
network protocol, although there is no requirement that this remain
the only sphere in which it operates.</p>

<p>IRC itself is a teleconferencing system, which (through the use of
the client-server model) is well-suited to running on many machines
in a distributed fashion.  A typical setup involves a single process
(the server) forming a central point for clients (or other servers)
to connect to, performing the required message delivery/multiplexing
and other functions.</p></li>
</ol>

<p>1.1 Servers</p>

<p>The server forms the backbone of IRC, providing a point to which
   clients may connect to to talk to each other, and a point for other
   servers to connect to, forming an IRC network.  The only network
   configuration allowed for IRC servers is that of a spanning tree [see
   Fig. 1] where each server acts as a central node for the rest of the
   net it sees.</p>

<pre><code>                       [ Server 15 ]  [ Server 13 ] [ Server 14]
                             /                \         /
                            /                  \       /
    [ Server 11 ] ------ [ Server 1 ]       [ Server 12]
                          /        \          /
                         /          \        /
              [ Server 2 ]          [ Server 3 ]
                /       \                      \
               /         \                      \
       [ Server 4 ]    [ Server 5 ]         [ Server 6 ]
        /    |    \                           /
       /     |     \                         /
      /      |      \____                   /
     /       |           \                 /
</code></pre>

<p>[ Server 7 ] [ Server 8 ] [ Server 9 ]   [ Server 10 ]</p>

<pre><code>                              :
                           [ etc. ]
                              :

             [ Fig. 1. Format of IRC server network ]
</code></pre>

<p>Oikarinen &amp; Reed                                                [Page 4]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>1.2 Clients</p>

<p>A client is anything connecting to a server that is not another
   server.  Each client is distinguished from other clients by a unique
   nickname having a maximum length of nine (9) characters.  See the
   protocol grammar rules for what may and may not be used in a
   nickname.  In addition to the nickname, all servers must have the
   following information about all clients: the real name of the host
   that the client is running on, the username of the client on that
   host, and the server to which the client is connected.</p>

<p>1.2.1 Operators</p>

<p>To allow a reasonable amount of order to be kept within the IRC
   network, a special class of clients (operators) is allowed to perform
   general maintenance functions on the network.  Although the powers
   granted to an operator can be considered as &#8216;dangerous&#8217;, they are
   nonetheless required.  Operators should be able to perform basic
   network tasks such as disconnecting and reconnecting servers as
   needed to prevent long-term use of bad network routing.  In
   recognition of this need, the protocol discussed herein provides for
   operators only to be able to perform such functions.  See sections
   4.1.7 (SQUIT) and 4.3.5 (CONNECT).</p>

<p>A more controversial power of operators is the ability  to  remove  a
   user  from  the connected network by &#8216;force&#8217;, i.e. operators are able
   to close the connection between any client and server.   The
   justification for  this  is delicate since its abuse is both
   destructive and annoying.  For further details on this type of
   action, see section 4.6.1 (KILL).</p>

<p>1.3 Channels</p>

<p>A channel is a named group of one or more clients which will all
   receive messages addressed to that channel.  The channel is created
   implicitly when the first client joins it, and the channel ceases to
   exist when the last client leaves it.  While channel exists, any
   client can reference the channel using the name of the channel.</p>

<p>Channels names are strings (beginning with a &#8216;&amp;&#8217; or &#8216;#&#8217; character) of
   length up to 200 characters.  Apart from the the requirement that the
   first character being either &#8216;&amp;&#8217; or &#8216;#&#8217;; the only restriction on a
   channel name is that it may not contain any spaces (&#8217; &#8216;), a control G
   (^G or ASCII 7), or a comma (&#8216;,&#8217; which is used as a list item
   separator by the protocol).</p>

<p>There are two types of channels allowed by this protocol.  One is a
   distributed channel which is known to all the servers that are</p>

<p>Oikarinen &amp; Reed                                                [Page 5]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>connected to the network. These channels are marked by the first
   character being a only clients on the server where it exists may join
   it.  These are distinguished by a leading &#8216;&amp;&#8217; character.  On top of
   these two types, there are the various channel modes available to
   alter the characteristics of individual channels.  See section 4.2.3
   (MODE command) for more details on this.</p>

<p>To create a new channel or become part of an existing channel, a user
   is required to JOIN the channel.  If the channel doesn&#8217;t exist prior
   to joining, the channel is created and the creating user becomes a
   channel operator.  If the channel already exists, whether or not your
   request to JOIN that channel is honoured depends on the current modes
   of the channel. For example, if the channel is invite-only, (+i),
   then you may only join if invited.  As part of the protocol, a user
   may be a part of several channels at once, but a limit of ten (10)
   channels is recommended as being ample for both experienced and
   novice users.  See section 8.13 for more information on this.</p>

<p>If the IRC network becomes disjoint because of a split between two
   servers, the channel on each side is only composed of those clients
   which are connected to servers on the respective sides of the split,
   possibly ceasing to exist on one side of the split.  When the split
   is healed, the connecting servers announce to each other who they
   think is in each channel and the mode of that channel.  If the
   channel exists on both sides, the JOINs and MODEs are interpreted in
   an inclusive manner so that both sides of the new connection will
   agree about which clients are in the channel and what modes the
   channel has.</p>

<p>1.3.1 Channel Operators</p>

<p>The channel operator (also referred to as a &#8220;chop&#8221; or &#8220;chanop&#8221;) on a
   given channel is considered to &#8216;own&#8217; that channel.  In recognition of
   this status, channel operators are endowed with certain powers which
   enable them to keep control and some sort of sanity in their channel.
   As an owner of a channel, a channel operator is not required to have
   reasons for their actions, although if their actions are generally
   antisocial or otherwise abusive, it might be reasonable to ask an IRC
   operator to intervene, or for the usersjust leave and go elsewhere
   and form their own channel.</p>

<p>The commands which may only be used by channel operators are:</p>

<pre><code>    KICK    - Eject a client from the channel
    MODE    - Change the channel's mode
    INVITE  - Invite a client to an invite-only channel (mode +i)
    TOPIC   - Change the channel topic in a mode +t channel
</code></pre>

<p>Oikarinen &amp; Reed                                                [Page 6]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>A channel operator is identified by the &#8216;@&#8217; symbol next to their
   nickname whenever it is associated with a channel (ie replies to the
   NAMES, WHO and WHOIS commands).</p>

<ol>
<li>The IRC Specification</li>
</ol>

<p>2.1 Overview</p>

<p>The protocol as described herein is for use both with server to
   server and client to server connections.  There are, however, more
   restrictions on client connections (which are considered to be
   untrustworthy) than on server connections.</p>

<p>2.2 Character codes</p>

<p>No specific character set is specified. The protocol is based on a a
   set of codes which are composed of eight (8) bits, making up an
   octet.  Each message may be composed of any number of these octets;
   however, some octet values are used for control codes which act as
   message delimiters.</p>

<p>Regardless of being an 8-bit protocol, the delimiters and keywords
   are such that protocol is mostly usable from USASCII terminal and a
   telnet connection.</p>

<p>Because of IRC&#8217;s scandanavian origin, the characters {}| are
   considered to be the lower case equivalents of the characters []\,
   respectively. This is a critical issue when determining the
   equivalence of two nicknames.</p>

<p>2.3 Messages</p>

<p>Servers and clients send eachother messages which may or may not
   generate a reply.  If the message contains a valid command, as
   described in later sections, the client should expect a reply as
   specified but it is not advised to wait forever for the reply; client
   to server and server to server communication is essentially
   asynchronous in nature.</p>

<p>Each IRC message may consist of up to three main parts: the prefix
   (optional), the command, and the command parameters (of which there
   may be up to 15).  The prefix, command, and all parameters are
   separated by one (or more) ASCII space character(s) (0x20).</p>

<p>The presence of a prefix is indicated with a single leading ASCII
   colon character (&#8216;:&#8217;, 0x3b), which must be the first character of the
   message itself.  There must be no gap (whitespace) between the colon
   and the prefix.  The prefix is used by servers to indicate the true</p>

<p>Oikarinen &amp; Reed                                                [Page 7]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>origin of the message.  If the prefix is missing from the message, it
   is assumed to have originated from the connection from which it was
   received.  Clients should not use prefix when sending a message from
   themselves; if they use a prefix, the only valid prefix is the
   registered nickname associated with the client.  If the source
   identified by the prefix cannot be found from the server&#8217;s internal
   database, or if the source is registered from a different link than
   from which the message arrived, the server must ignore the message
   silently.</p>

<p>The command must either be a valid IRC command or a three (3) digit
   number represented in ASCII text.</p>

<p>IRC messages are always lines of characters terminated with a CR-LF
   (Carriage Return - Line Feed) pair, and these messages shall not
   exceed 512 characters in length, counting all characters including
   the trailing CR-LF. Thus, there are 510 characters maximum allowed
   for the command and its parameters.  There is no provision for
   continuation message lines.  See section 7 for more details about
   current implementations.</p>

<p>2.3.1 Message format in &#8216;pseudo&#8217; BNF</p>

<p>The protocol messages must be extracted from the contiguous stream of
   octets.  The current solution is to designate two characters, CR and
   LF, as message separators.   Empty  messages  are  silently  ignored,
   which permits  use  of  the  sequence  CR-LF  between  messages
   without extra problems.</p>

<p>The extracted message is parsed into the components <prefix>,
   <command> and list of parameters matched either by <middle> or
   <trailing> components.</p>

<p>The BNF representation for this is:</p>

<p><message>  ::= [&#8216;:&#8217; <prefix> <SPACE> ] <command> <params> <crlf>
<prefix>   ::= <servername> | <nick> [ &#8216;!&#8217; <user> ] [ &#8216;@&#8217; <host> ]
<command>  ::= <letter> { <letter> } | <number> <number> <number>
<SPACE>    ::= &#8217; &#8217; { &#8217; &#8217; }
<params>   ::= <SPACE> [ &#8216;:&#8217; <trailing> | <middle> <params> ]</p>

<p><middle>   ::= <Any *non-empty* sequence of octets not including SPACE
               or NUL or CR or LF, the first of which may not be ':'>
<trailing> ::= &lt;Any, possibly <em>empty</em>, sequence of octets not including
                 NUL or CR or LF></p>

<p><crlf>     ::= CR LF</p>

<p>Oikarinen &amp; Reed                                                [Page 8]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>NOTES:</p>

<p>1)    <SPACE> is consists only of SPACE character(s) (0x20).
        Specially notice that TABULATION, and all other control
        characters are considered NON-WHITE-SPACE.</p>

<p>2)    After extracting the parameter list, all parameters are equal,
        whether matched by <middle> or <trailing>. <Trailing> is just
        a syntactic trick to allow SPACE within parameter.</p>

<p>3)    The fact that CR and LF cannot appear in parameter strings is
        just artifact of the message framing. This might change later.</p>

<p>4)    The NUL character is not special in message framing, and
        basically could end up inside a parameter, but as it would
        cause extra complexities in normal C string handling. Therefore
        NUL is not allowed within messages.</p>

<p>5)    The last parameter may be an empty string.</p>

<p>6)    Use of the extended prefix ([&#8216;!&#8217; <user> ] [&#8216;@&#8217; <host> ]) must
        not be used in server to server communications and is only
        intended for server to client messages in order to provide
        clients with more useful information about who a message is
        from without the need for additional queries.</p>

<p>Most protocol messages specify additional semantics and syntax for
   the extracted parameter strings dictated by their position in the
   list.  For example, many server commands will assume that the first
   parameter after the command is the list of targets, which can be
   described with:</p>

<p><target>     ::= <to> [ &#8220;,&#8221; <target> ]
   <to>         ::= <channel> | <user> &#8216;@&#8217; <servername> | <nick> | <mask>
   <channel>    ::= (&#8216;#&#8217; | &#8216;&amp;&#8217;) <chstring>
   <servername> ::= <host>
   <host>       ::= see RFC 952 [DNS:4] for details on allowed hostnames
   <nick>       ::= <letter> { <letter> | <number> | <special> }
   <mask>       ::= (&#8216;#&#8217; | &#8216;$&#8217;) <chstring>
   <chstring>   ::= <any 8bit code except SPACE, BELL, NUL, CR, LF and
                     comma (',')></p>

<p>Other parameter syntaxes are:</p>

<p><user>       ::= <nonwhite> { <nonwhite> }
   <letter>     ::= &#8216;a&#8217; &#8230; &#8216;z&#8217; | &#8216;A&#8217; &#8230; &#8216;Z&#8217;
   <number>     ::= &#8216;0&#8217; &#8230; &#8216;9&#8217;
   <special>    ::= &#8216;-&#8217; | &#8216;[&#8217; | &#8216;]&#8217; | &#8216;&#39; | &#8216;`&#8217; | &#8216;^&#8217; | &#8216;{&#8217; | &#8216;}&#8217;</p>

<p>Oikarinen &amp; Reed                                                [Page 9]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p><nonwhite>   ::= <any 8bit code except SPACE (0x20), NUL (0x0), CR
                     (0xd), and LF (0xa)></p>

<p>2.4 Numeric replies</p>

<p>Most of the messages sent to the server generate a reply of some
   sort.  The most common reply is the numeric reply, used for both
   errors and normal replies.  The numeric reply must be sent as one
   message consisting of the sender prefix, the three digit numeric, and
   the target of the reply.  A numeric reply is not allowed to originate
   from a client; any such messages received by a server are silently
   dropped. In all other respects, a numeric reply is just like a normal
   message, except that the keyword is made up of 3 numeric digits
   rather than a string of letters.  A list of different replies is
   supplied in section 6.</p>

<ol>
<li><p>IRC Concepts.</p>

<p>This section is devoted to describing the actual concepts behind  the
organization  of  the  IRC  protocol and how the current
implementations deliver different classes of messages.</p>

<pre><code>                  1--\
                      A        D---4
                  2--/ \      /
                        B----C
                       /      \
                      3        E
</code></pre>

<p>Servers: A, B, C, D, E         Clients: 1, 2, 3, 4</p>

<pre><code>            [ Fig. 2. Sample small IRC network ]
</code></pre></li>
</ol>

<p>3.1 One-to-one communication</p>

<p>Communication on a one-to-one basis is usually only performed by
   clients, since most server-server traffic is not a result of servers
   talking only to each other.  To provide a secure means for clients to
   talk to each other, it is required that all servers be able to send a
   message in exactly one direction along the spanning tree in order to
   reach any client.  The path of a message being delivered is the
   shortest path between any two points on the spanning tree.</p>

<p>The following examples all refer to Figure 2 above.</p>

<p>Oikarinen &amp; Reed                                               [Page 10]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Example 1:
     A message between clients 1 and 2 is only seen by server A, which
     sends it straight to client 2.</p>

<p>Example 2:
     A message between clients 1 and 3 is seen by servers A &amp; B, and
     client 3.  No other clients or servers are allowed see the message.</p>

<p>Example 3:
     A message between clients 2 and 4 is seen by servers A, B, C &amp; D
     and client 4 only.</p>

<p>3.2 One-to-many</p>

<p>The main goal of IRC is to provide a  forum  which  allows  easy  and
   efficient  conferencing (one to many conversations).  IRC offers
   several means to achieve this, each serving its own purpose.</p>

<p>3.2.1 To a list</p>

<p>The least efficient style of one-to-many conversation is through
   clients talking to a &#8216;list&#8217; of users.  How this is done is almost
   self explanatory: the client gives a list of destinations to which
   the message is to be delivered and the server breaks it up and
   dispatches a separate copy of the message to each given destination.
   This isn&#8217;t as efficient as using a group since the destination list
   is broken up and the dispatch sent without checking to make sure
   duplicates aren&#8217;t sent down each path.</p>

<p>3.2.2 To a group (channel)</p>

<p>In IRC the channel has a role equivalent to that of the multicast
   group; their existence is dynamic (coming and going as people join
   and leave channels) and the actual conversation carried out on a
   channel is only sent to servers which are supporting users on a given
   channel.  If there are multiple users on a server in the same
   channel, the message text is sent only once to that server and then
   sent to each client on the channel.  This action is then repeated for
   each client-server combination until the original message has fanned
   out and reached each member of the channel.</p>

<p>The following examples all refer to Figure 2.</p>

<p>Example 4:
     Any channel with 1 client in it. Messages to the channel go to the
     server and then nowhere else.</p>

<p>Oikarinen &amp; Reed                                               [Page 11]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Example 5:
     2 clients in a channel. All messages traverse a path as if they
     were private messages between the two clients outside a channel.</p>

<p>Example 6:
     Clients 1, 2 and 3 in a channel.  All messages to the channel are
     sent to all clients and only those servers which must be traversed
     by the message if it were a private message to a single client.  If
     client 1 sends a message, it goes back to client 2 and then via
     server B to client 3.</p>

<p>3.2.3 To a host/server mask</p>

<p>To provide IRC operators with some mechanism to send  messages  to  a
   large body of related users, host and server mask messages are
   provided.  These messages are sent to users whose host or server
   information  match that  of  the mask.  The messages are only sent to
   locations where users are, in a fashion similar to that of channels.</p>

<p>3.3 One-to-all</p>

<p>The one-to-all type of message is better described as a broadcast
   message, sent to all clients or servers or both.  On a large network
   of users and servers, a single message can result in a lot of traffic
   being sent over the network in an effort to reach all of the desired
   destinations.</p>

<p>For some messages, there is no option but to broadcast it to all
   servers so that the state information held by each server is
   reasonably consistent between servers.</p>

<p>3.3.1 Client-to-Client</p>

<p>There is no class of message which, from a single message, results in
   a message being sent to every other client.</p>

<p>3.3.2 Client-to-Server</p>

<p>Most of the commands which result in a change of state information
   (such as channel membership, channel mode, user status, etc) must be
   sent to all servers by default, and this distribution may not be
   changed by the client.</p>

<p>3.3.3 Server-to-Server.</p>

<p>While most messages between servers are distributed to all &#8216;other&#8217;
   servers, this is only required for any message that affects either a
   user, channel or server.  Since these are the basic items found in</p>

<p>Oikarinen &amp; Reed                                               [Page 12]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>IRC, nearly all messages originating from a server are broadcast to
   all other connected servers.</p>

<ol>
<li><p>Message details</p>

<p>On the following pages are descriptions of each message recognized by
the IRC server and client.  All commands described in this section
must be implemented by any server for this protocol.</p>

<p>Where the reply ERR_NOSUCHSERVER is listed, it means that the
<server> parameter could not be found.  The server must not send any
other replies after this for that command.</p>

<p>The server to which a client is connected is required to parse the
complete message, returning any appropriate errors.  If the server
encounters a fatal error while parsing a message, an error must be
sent back to the client and the parsing terminated.  A fatal error
may be considered to be incorrect command, a destination which is
otherwise unknown to the server (server, nick or channel names fit
this category), not enough parameters or incorrect privileges.</p>

<p>If a full set of parameters is presented, then each must be checked
for validity and appropriate responses sent back to the client.  In
the case of messages which use parameter lists using the comma as an
item separator, a reply must be sent for each item.</p>

<p>In the examples below, some messages appear using the full format:</p>

<p>:Name COMMAND parameter list</p>

<p>Such examples represent a message from &#8220;Name&#8221; in transit between
servers, where it is essential to include the name of the original
sender of the message so remote servers may send back a reply along
the correct path.</p></li>
</ol>

<p>4.1 Connection Registration</p>

<p>The commands described here are used to register a connection with an
   IRC server as either a user or a server as well as correctly
   disconnect.</p>

<p>A &#8220;PASS&#8221; command is not required for either client or server
   connection to be registered, but it must precede the server message
   or the latter of the NICK/USER combination.  It is strongly
   recommended that all server connections have a password in order to
   give some level of security to the actual connections.  The
   recommended order for a client to register is as follows:</p>

<p>Oikarinen &amp; Reed                                               [Page 13]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>       1. Pass message
       2. Nick message
       3. User message
</code></pre>

<p>4.1.1 Password message</p>

<pre><code>  Command: PASS
</code></pre>

<p>Parameters: <password></p>

<p>The PASS command is used to set a &#8216;connection password&#8217;.  The
   password can and must be set before any attempt to register the
   connection is made.  Currently this requires that clients send a PASS
   command before sending the NICK/USER combination and servers <em>must</em>
   send a PASS command before any SERVER command.  The password supplied
   must match the one contained in the C/N lines (for servers) or I
   lines (for clients).  It is possible to send multiple PASS commands
   before registering but only the last one sent is used for
   verification and it may not be changed once registered.  Numeric
   Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED
</code></pre>

<p>Example:</p>

<pre><code>       PASS secretpasswordhere
</code></pre>

<p>4.1.2 Nick message</p>

<pre><code>  Command: NICK
</code></pre>

<p>Parameters: <nickname> [ <hopcount> ]</p>

<p>NICK message is used to give user a nickname or change the previous
   one.  The <hopcount> parameter is only used by servers to indicate
   how far away a nick is from its home server.  A local connection has
   a hopcount of 0.  If supplied by a client, it must be ignored.</p>

<p>If a NICK message arrives at a server which already knows about an
   identical nickname for another client, a nickname collision occurs.
   As a result of a nickname collision, all instances of the nickname
   are removed from the server&#8217;s database, and a KILL command is issued
   to remove the nickname from all other server&#8217;s database. If the NICK
   message causing the collision was a nickname change, then the
   original (old) nick must be removed as well.</p>

<p>If the server recieves an identical NICK from a client which is
   directly connected, it may issue an ERR_NICKCOLLISION to the local
   client, drop the NICK command, and not generate any kills.</p>

<p>Oikarinen &amp; Reed                                               [Page 14]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NONICKNAMEGIVEN             ERR_ERRONEUSNICKNAME
       ERR_NICKNAMEINUSE               ERR_NICKCOLLISION
</code></pre>

<p>Example:</p>

<p>NICK Wiz                        ; Introducing new nick &#8220;Wiz&#8221;.</p>

<p>:WiZ NICK Kilroy                ; WiZ changed his nickname to Kilroy.</p>

<p>4.1.3 User message</p>

<pre><code>  Command: USER
</code></pre>

<p>Parameters: <username> <hostname> <servername> <realname></p>

<p>The USER message is used at the beginning of connection to specify
   the username, hostname, servername and realname of s new user.  It is
   also used in communication between servers to indicate new user
   arriving on IRC, since only after both USER and NICK have been
   received from a client does a user become registered.</p>

<p>Between servers USER must to be prefixed with client&#8217;s NICKname.
   Note that hostname and servername are normally ignored by the IRC
   server when the USER command comes from a directly connected client
   (for security reasons), but they are used in server to server
   communication.  This means that a NICK must always be sent to a
   remote server when a new user is being introduced to the rest of the
   network before the accompanying USER is sent.</p>

<p>It must be noted that realname parameter must be the last parameter,
   because it may contain space characters and must be prefixed with a
   colon (&#8216;:&#8217;) to make sure this is recognised as such.</p>

<p>Since it is easy for a client to lie about its username by relying
   solely on the USER message, the use of an &#8220;Identity Server&#8221; is
   recommended.  If the host which a user connects from has such a
   server enabled the username is set to that as in the reply from the
   &#8220;Identity Server&#8221;.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED
</code></pre>

<p>Examples:</p>

<p>USER guest tolmoon tolsun :Ronnie Reagan</p>

<p>Oikarinen &amp; Reed                                               [Page 15]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                               ; User registering themselves with a
                               username of "guest" and real name
                               "Ronnie Reagan".
</code></pre>

<p>:testnick USER guest tolmoon tolsun :Ronnie Reagan
                                   ; message between servers with the
                                   nickname for which the USER command
                                   belongs to</p>

<p>4.1.4 Server message</p>

<pre><code>  Command: SERVER
</code></pre>

<p>Parameters: <servername> <hopcount> <info></p>

<p>The server message is used to tell a server that the other end of a
   new connection is a server. This message is also used to pass server
   data over whole net.  When a new server is connected to net,
   information about it be broadcast to the whole network.  <hopcount>
   is used to give all servers some internal information on how far away
   all servers are.  With a full server list, it would be possible to
   construct a map of the entire server tree, but hostmasks prevent this
   from being done.</p>

<p>The SERVER message must only be accepted from either (a) a connection
   which is yet to be registered and is attempting to register as a
   server, or (b) an existing connection to another server, in  which
   case the SERVER message is introducing a new server behind that
   server.</p>

<p>Most errors that occur with the receipt of a SERVER command result in
   the connection being terminated by the destination host (target
   SERVER).  Error replies are usually sent using the &#8220;ERROR&#8221; command
   rather than the numeric since the ERROR command has several useful
   properties which make it useful here.</p>

<p>If a SERVER message is parsed and attempts to introduce a server
   which is already known to the receiving server, the connection from
   which that message must be closed (following the correct procedures),
   since a duplicate route to a server has formed and the acyclic nature
   of the IRC tree broken.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_ALREADYREGISTRED
</code></pre>

<p>Example:</p>

<p>Oikarinen &amp; Reed                                               [Page 16]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>SERVER test.oulu.fi 1 :[tolsun.oulu.fi] Experimental server
                                ; New server test.oulu.fi introducing
                                itself and attempting to register.  The
                                name in []&#8217;s is the hostname for the
                                host running test.oulu.fi.</p>

<p>:tolsun.oulu.fi SERVER csd.bu.edu 5 :BU Central Server
                                ; Server tolsun.oulu.fi is our uplink
                                for csd.bu.edu which is 5 hops away.</p>

<p>4.1.5 Oper</p>

<pre><code>  Command: OPER
</code></pre>

<p>Parameters: <user> <password></p>

<p>OPER message is used by a normal user to obtain operator privileges.
   The combination of <user> and <password> are required to gain
   Operator privileges.</p>

<p>If the client sending the OPER command supplies the correct password
   for the given user, the server then informs the rest of the network
   of the new operator by issuing a &#8220;MODE +o&#8221; for the clients nickname.</p>

<p>The OPER message is client-server only.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              RPL_YOUREOPER
       ERR_NOOPERHOST                  ERR_PASSWDMISMATCH
</code></pre>

<p>Example:</p>

<p>OPER foo bar                    ; Attempt to register as an operator
                                   using a username of &#8220;foo&#8221; and &#8220;bar&#8221; as
                                   the password.</p>

<p>4.1.6 Quit</p>

<pre><code>  Command: QUIT
</code></pre>

<p>Parameters: [<Quit message>]</p>

<p>A client session is ended with a quit message.  The server must close
   the connection to a client which sends a QUIT message. If a &#8220;Quit
   Message&#8221; is given, this will be sent instead of the default message,
   the nickname.</p>

<p>When netsplits (disconnecting of two servers) occur, the quit message</p>

<p>Oikarinen &amp; Reed                                               [Page 17]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>is composed of the names of two servers involved, separated by a
   space.  The first name is that of the server which is still connected
   and the second name is that of the server that has become
   disconnected.</p>

<p>If, for some other reason, a client connection is closed without  the
   client  issuing  a  QUIT  command  (e.g.  client  dies and EOF occurs
   on socket), the server is required to fill in the quit  message  with
   some sort  of  message  reflecting the nature of the event which
   caused it to happen.</p>

<p>Numeric Replies:</p>

<pre><code>       None.
</code></pre>

<p>Examples:</p>

<p>QUIT :Gone to have lunch        ; Preferred message format.</p>

<p>4.1.7 Server quit message</p>

<pre><code>  Command: SQUIT
</code></pre>

<p>Parameters: <server> <comment></p>

<p>The SQUIT message is needed to tell about quitting or dead servers.
   If a server wishes to break the connection to another server it must
   send a SQUIT message to the other server, using the the name of the
   other server as the server parameter, which then closes its
   connection to the quitting server.</p>

<p>This command is also available operators to help keep a network of
   IRC servers connected in an orderly fashion.  Operators may also
   issue an SQUIT message for a remote server connection.  In this case,
   the SQUIT must be parsed by each server inbetween the operator and
   the remote server, updating the view of the network held by each
   server as explained below.</p>

<p>The <comment> should be supplied by all operators who execute a SQUIT
   for a remote server (that is not connected to the server they are
   currently on) so that other operators are aware for the reason of
   this action.  The <comment> is also filled in by servers which may
   place an error or similar message here.</p>

<p>Both of the servers which are on either side of the connection being
   closed are required to to send out a SQUIT message (to all its other
   server connections) for all other servers which are considered to be
   behind that link.</p>

<p>Oikarinen &amp; Reed                                               [Page 18]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Similarly, a QUIT message must be sent to the other connected servers
   rest of the network on behalf of all clients behind that link.  In
   addition to this, all channel members of a channel which lost a
   member due to the split must be sent a QUIT message.</p>

<p>If a server connection is terminated prematurely (e.g. the server  on
   the  other  end  of  the  link  died),  the  server  which  detects
   this disconnection is required to inform the rest of  the  network
   that  the connection  has  closed  and  fill  in  the comment field
   with something appropriate.</p>

<p>Numeric replies:</p>

<pre><code>       ERR_NOPRIVILEGES                ERR_NOSUCHSERVER
</code></pre>

<p>Example:</p>

<p>SQUIT tolsun.oulu.fi :Bad Link ? ; the server link tolson.oulu.fi has
                                   been terminated because of &#8220;Bad Link&#8221;.</p>

<p>:Trillian SQUIT cm22.eng.umd.edu :Server out of control
                                    ; message from Trillian to disconnect
                                   &#8220;cm22.eng.umd.edu&#8221; from the net
                                    because &#8220;Server out of control&#8221;.</p>

<p>4.2 Channel operations</p>

<p>This group of messages is concerned with manipulating channels, their
   properties (channel modes), and their contents (typically clients).
   In implementing these, a number of race conditions are inevitable
   when clients at opposing ends of a network send commands which will
   ultimately clash.  It is also required that servers keep a nickname
   history to ensure that wherever a <nick> parameter is given, the
   server check its history in case it has recently been changed.</p>

<p>4.2.1 Join message</p>

<pre><code>  Command: JOIN
</code></pre>

<p>Parameters: <channel>{,<channel>} [<key>{,<key>}]</p>

<p>The JOIN command is used by client to start listening a specific
   channel. Whether or not a client is allowed to join a channel is
   checked only by the server the client is connected to; all other
   servers automatically add the user to the channel when it is received
   from other servers.  The conditions which affect this are as follows:</p>

<pre><code>       1.  the user must be invited if the channel is invite-only;
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 19]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>       2.  the user's nick/username/hostname must not match any
           active bans;

       3.  the correct key (password) must be given if it is set.
</code></pre>

<p>These are discussed in more detail under the MODE command (see
   section 4.2.3 for more details).</p>

<p>Once a user has joined a channel, they receive notice about all
   commands their server receives which affect the channel.  This
   includes MODE, KICK, PART, QUIT and of course PRIVMSG/NOTICE.  The
   JOIN command needs to be broadcast to all servers so that each server
   knows where to find the users who are on the channel.  This allows
   optimal delivery of PRIVMSG/NOTICE messages to the channel.</p>

<p>If a JOIN is successful, the user is then sent the channel&#8217;s topic
   (using RPL<em>TOPIC) and the list of users who are on the channel (using
   RPL</em>NAMREPLY), which must include the user joining.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_BANNEDFROMCHAN
       ERR_INVITEONLYCHAN              ERR_BADCHANNELKEY
       ERR_CHANNELISFULL               ERR_BADCHANMASK
       ERR_NOSUCHCHANNEL               ERR_TOOMANYCHANNELS
       RPL_TOPIC
</code></pre>

<p>Examples:</p>

<p>JOIN #foobar                    ; join channel #foobar.</p>

<p>JOIN &amp;foo fubar                 ; join channel &amp;foo using key &#8220;fubar&#8221;.</p>

<p>JOIN #foo,&amp;bar fubar            ; join channel #foo using key &#8220;fubar&#8221;
                                   and &amp;bar using no key.</p>

<p>JOIN #foo,#bar fubar,foobar     ; join channel #foo using key &#8220;fubar&#8221;.
                                   and channel #bar using key &#8220;foobar&#8221;.</p>

<p>JOIN #foo,#bar                  ; join channels #foo and #bar.</p>

<p>:WiZ JOIN #Twilight_zone        ; JOIN message from WiZ</p>

<p>4.2.2 Part message</p>

<pre><code>  Command: PART
</code></pre>

<p>Parameters: <channel>{,<channel>}</p>

<p>Oikarinen &amp; Reed                                               [Page 20]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>The PART message causes the client sending the message to be removed
   from the list of active users for all given channels listed in the
   parameter string.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL
       ERR_NOTONCHANNEL
</code></pre>

<p>Examples:</p>

<p>PART #twilight<em>zone             ; leave channel &#8220;#twilight</em>zone&#8221;</p>

<p>PART #oz-ops,&amp;group5            ; leave both channels &#8220;&amp;group5&#8221; and
                                   &#8220;#oz-ops&#8221;.</p>

<p>4.2.3 Mode message</p>

<pre><code>  Command: MODE
</code></pre>

<p>The MODE command is a dual-purpose command in IRC.  It allows both
   usernames and channels to have their mode changed.  The rationale for
   this choice is that one day nicknames will be obsolete and the
   equivalent property will be the channel.</p>

<p>When parsing MODE messages, it is recommended that the entire message
   be parsed first and then the changes which resulted then passed on.</p>

<p>4.2.3.1 Channel modes</p>

<p>Parameters: <channel> {[+|-]|o|p|s|i|t|n|b|v} [<limit>] [<user>]
               [<ban mask>]</p>

<p>The MODE command is provided so that channel operators may change the
   characteristics of `their&#8217; channel.  It is also required that servers
   be able to change channel modes so that channel operators may be
   created.</p>

<p>The various modes available for channels are as follows:</p>

<pre><code>       o - give/take channel operator privileges;
       p - private channel flag;
       s - secret channel flag;
       i - invite-only channel flag;
       t - topic settable by channel operator only flag;
       n - no messages to channel from clients on the outside;
       m - moderated channel;
       l - set the user limit to channel;
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 21]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>       b - set a ban mask to keep users out;
       v - give/take the ability to speak on a moderated channel;
       k - set a channel key (password).
</code></pre>

<p>When using the &#8216;o&#8217; and &#8216;b&#8217; options, a restriction on a total of three
   per mode command has been imposed.  That is, any combination of &#8216;o&#8217;
   and</p>

<p>4.2.3.2 User modes</p>

<p>Parameters: <nickname> {[+|-]|i|w|s|o}</p>

<p>The user MODEs are typically changes which affect either how the
   client is seen by others or what &#8216;extra&#8217; messages the client is sent.
   A user MODE command may only be accepted if both the sender of the
   message and the nickname given as a parameter are both the same.</p>

<p>The available modes are as follows:</p>

<pre><code>       i - marks a users as invisible;
       s - marks a user for receipt of server notices;
       w - user receives wallops;
       o - operator flag.
</code></pre>

<p>Additional modes may be available later on.</p>

<p>If a user attempts to make themselves an operator using the &#8220;+o&#8221;
   flag, the attempt should be ignored.  There is no restriction,
   however, on anyone `deopping&#8217; themselves (using &#8220;-o&#8221;).  Numeric
   Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              RPL_CHANNELMODEIS
       ERR_CHANOPRIVSNEEDED            ERR_NOSUCHNICK
       ERR_NOTONCHANNEL                ERR_KEYSET
       RPL_BANLIST                     RPL_ENDOFBANLIST
       ERR_UNKNOWNMODE                 ERR_NOSUCHCHANNEL

       ERR_USERSDONTMATCH              RPL_UMODEIS
       ERR_UMODEUNKNOWNFLAG
</code></pre>

<p>Examples:</p>

<pre><code>       Use of Channel Modes:
</code></pre>

<p>MODE #Finnish +im               ; Makes #Finnish channel moderated and
                                &#8216;invite-only&#8217;.</p>

<p>MODE #Finnish +o Kilroy         ; Gives &#8216;chanop&#8217; privileges to Kilroy on</p>

<p>Oikarinen &amp; Reed                                               [Page 22]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                            channel #Finnish.
</code></pre>

<p>MODE #Finnish +v Wiz            ; Allow WiZ to speak on #Finnish.</p>

<p>MODE #Fins -s                   ; Removes &#8216;secret&#8217; flag from channel
                                #Fins.</p>

<p>MODE #42 +k oulu                ; Set the channel key to &#8220;oulu&#8221;.</p>

<p>MODE #eu-opers +l 10            ; Set the limit for the number of users
                                on channel to 10.</p>

<p>MODE &amp;oulu +b                   ; list ban masks set for channel.</p>

<p>MODE &amp;oulu +b <em>!</em>@*             ; prevent all users from joining.</p>

<p>MODE &amp;oulu +b <em>!</em>@*.edu         ; prevent any user from a hostname
                                matching *.edu from joining.</p>

<pre><code>    Use of user Modes:
</code></pre>

<p>:MODE WiZ -w                    ; turns reception of WALLOPS messages
                                off for WiZ.</p>

<p>:Angel MODE Angel +i            ; Message from Angel to make themselves
                                invisible.</p>

<p>MODE WiZ -o                     ; WiZ &#8216;deopping&#8217; (removing operator
                                status).  The plain reverse of this
                                command (&#8220;MODE WiZ +o&#8221;) must not be
                                allowed from users since would bypass
                                the OPER command.</p>

<p>4.2.4 Topic message</p>

<pre><code>  Command: TOPIC
</code></pre>

<p>Parameters: <channel> [<topic>]</p>

<p>The TOPIC message is used to change or view the topic of a channel.
   The topic for channel <channel> is returned if there is no <topic>
   given.  If the <topic> parameter is present, the topic for that
   channel will be changed, if the channel modes permit this action.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_NOTONCHANNEL
       RPL_NOTOPIC                     RPL_TOPIC
       ERR_CHANOPRIVSNEEDED
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 23]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Examples:</p>

<p>:Wiz TOPIC #test :New topic     ;User Wiz setting the topic.</p>

<p>TOPIC #test :another topic      ;set the topic on #test to &#8220;another
                                   topic&#8221;.</p>

<p>TOPIC #test                     ; check the topic for #test.</p>

<p>4.2.5 Names message</p>

<pre><code>  Command: NAMES
</code></pre>

<p>Parameters: [<channel>{,<channel>}]</p>

<p>By using the NAMES command, a user can list all nicknames that are
   visible to them on any channel that they can see.  Channel names
   which they can see are those which aren&#8217;t private (+p) or secret (+s)
   or those which they are actually on.  The <channel> parameter
   specifies which channel(s) to return information about if valid.
   There is no error reply for bad channel names.</p>

<p>If no <channel> parameter is given, a list of all channels and their
   occupants is returned.  At the end of this list, a list of users who
   are visible but either not on any channel or not on a visible channel
   are listed as being on `channel&#8217; &#8220;*&#8221;.</p>

<p>Numerics:</p>

<pre><code>       RPL_NAMREPLY                    RPL_ENDOFNAMES
</code></pre>

<p>Examples:</p>

<p>NAMES #twilight<em>zone,#42        ; list visible users on #twilight</em>zone
                                   and #42 if the channels are visible to
                                   you.</p>

<p>NAMES                           ; list all visible channels and users</p>

<p>4.2.6 List message</p>

<pre><code>  Command: LIST
</code></pre>

<p>Parameters: [<channel>{,<channel>} [<server>]]</p>

<p>The list message is used to list channels and their topics.  If  the
   <channel>  parameter  is  used,  only  the  status  of  that  channel
   is displayed.  Private  channels  are  listed  (without  their
   topics)  as channel &#8220;Prv&#8221; unless the client generating the query is
   actually on that channel.  Likewise, secret channels are not listed</p>

<p>Oikarinen &amp; Reed                                               [Page 24]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>at  all  unless  the client is a member of the channel in question.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER                RPL_LISTSTART
       RPL_LIST                        RPL_LISTEND
</code></pre>

<p>Examples:</p>

<p>LIST                            ; List all channels.</p>

<p>LIST #twilight<em>zone,#42         ; List channels #twilight</em>zone and #42</p>

<p>4.2.7 Invite message</p>

<pre><code>  Command: INVITE
</code></pre>

<p>Parameters: <nickname> <channel></p>

<p>The INVITE message is used to invite users to a channel.  The
   parameter <nickname> is the nickname of the person to be invited to
   the target channel <channel>.  There is no requirement that the
   channel the target user is being invited to must exist or be a valid
   channel.  To invite a user to a channel which is invite only (MODE
   +i), the client sending the invite must be recognised as being a
   channel operator on the given channel.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_NOSUCHNICK
       ERR_NOTONCHANNEL                ERR_USERONCHANNEL
       ERR_CHANOPRIVSNEEDED
       RPL_INVITING                    RPL_AWAY
</code></pre>

<p>Examples:</p>

<p>:Angel INVITE Wiz #Dust         ; User Angel inviting WiZ to channel
                                   #Dust</p>

<p>INVITE Wiz #Twilight<em>Zone       ; Command to invite WiZ to
                                   #Twilight</em>zone</p>

<p>4.2.8 Kick command</p>

<pre><code>  Command: KICK
</code></pre>

<p>Parameters: <channel> <user> [<comment>]</p>

<p>The KICK command can be  used  to  forcibly  remove  a  user  from  a
   channel.   It  &#8216;kicks  them  out&#8217;  of the channel (forced PART).</p>

<p>Oikarinen &amp; Reed                                               [Page 25]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Only a channel operator may kick another user out of a  channel.
   Each  server that  receives  a KICK message checks that it is valid
   (ie the sender is actually a  channel  operator)  before  removing
   the  victim  from  the channel.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL
       ERR_BADCHANMASK                 ERR_CHANOPRIVSNEEDED
       ERR_NOTONCHANNEL
</code></pre>

<p>Examples:</p>

<p>KICK &amp;Melbourne Matthew         ; Kick Matthew from &amp;Melbourne</p>

<p>KICK #Finnish John :Speaking English
                                ; Kick John from #Finnish using
                                &#8220;Speaking English&#8221; as the reason
                                (comment).</p>

<p>:WiZ KICK #Finnish John         ; KICK message from WiZ to remove John
                                from channel #Finnish</p>

<p>NOTE:
     It is possible to extend the KICK command parameters to the
following:</p>

<p><channel>{,<channel>} <user>{,<user>} [<comment>]</p>

<p>4.3 Server queries and commands</p>

<p>The server query group of commands has been designed to return
   information about any server which is connected to the network.  All
   servers connected must respond to these queries and respond
   correctly.  Any invalid response (or lack thereof) must be considered
   a sign of a broken server and it must be disconnected/disabled as
   soon as possible until the situation is remedied.</p>

<p>In these queries, where a parameter appears as &#8220;<server>&#8221;, it will
   usually mean it can be a nickname or a server or a wildcard name of
   some sort.  For each parameter, however, only one query and set of
   replies is to be generated.</p>

<p>4.3.1 Version message</p>

<pre><code>  Command: VERSION
</code></pre>

<p>Parameters: [<server>]</p>

<p>Oikarinen &amp; Reed                                               [Page 26]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>The VERSION message is used  to  query  the  version  of  the  server
   program.  An optional parameter <server> is used to query the version
   of the server program which a client is not directly connected to.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER                RPL_VERSION
</code></pre>

<p>Examples:</p>

<p>:Wiz VERSION <em>.se               ; message from Wiz to check the version
                                   of a server matching &#8220;</em>.se&#8221;</p>

<p>VERSION tolsun.oulu.fi          ; check the version of server
                                   &#8220;tolsun.oulu.fi&#8221;.</p>

<p>4.3.2 Stats message</p>

<pre><code>  Command: STATS
</code></pre>

<p>Parameters: [<query> [<server>]]</p>

<p>The stats message is used to query statistics of certain server.  If
   <server> parameter is omitted, only the end of stats reply is sent
   back.  The implementation of this command is highly dependent on the
   server which replies, although the server must be able to supply
   information as described by the queries below (or similar).</p>

<p>A query may be given by any single letter which is only checked by
   the destination server (if given as the <server> parameter) and is
   otherwise passed on by intermediate servers, ignored and unaltered.
   The following queries are those found in the current IRC
   implementation and provide a large portion of the setup information
   for that server.  Although these may not be supported in the same way
   by other versions, all servers should be able to supply a valid reply
   to a STATS query which is consistent with the reply formats currently
   used and the purpose of the query.</p>

<p>The currently supported queries are:</p>

<pre><code>       c - returns a list of servers which the server may connect
           to or allow connections from;
       h - returns a list of servers which are either forced to be
           treated as leaves or allowed to act as hubs;
       i - returns a list of hosts which the server allows a client
           to connect from;
       k - returns a list of banned username/hostname combinations
           for that server;
       l - returns a list of the server's connections, showing how
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 27]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>           long each connection has been established and the traffic
           over that connection in bytes and messages for each
           direction;
       m - returns a list of commands supported by the server and
           the usage count for each if the usage count is non zero;
       o - returns a list of hosts from which normal clients may
           become operators;
       y - show Y (Class) lines from server's configuration file;
       u - returns a string showing how long the server has been up.
</code></pre>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER
       RPL_STATSCLINE                  RPL_STATSNLINE
       RPL_STATSILINE                  RPL_STATSKLINE
       RPL_STATSQLINE                  RPL_STATSLLINE
       RPL_STATSLINKINFO               RPL_STATSUPTIME
       RPL_STATSCOMMANDS               RPL_STATSOLINE
       RPL_STATSHLINE                  RPL_ENDOFSTATS
</code></pre>

<p>Examples:</p>

<p>STATS m                         ; check the command usage for the server
                                you are connected to</p>

<p>:Wiz STATS c eff.org            ; request by WiZ for C/N line
                                information from server eff.org</p>

<p>4.3.3 Links message</p>

<pre><code>  Command: LINKS
</code></pre>

<p>Parameters: [[<remote server>] <server mask>]</p>

<p>With LINKS, a user can list all servers which are known by the server
   answering the query.  The returned list of servers must match the
   mask, or if no mask is given, the full list is returned.</p>

<p>If <remote server> is given in addition to <server mask>, the LINKS
   command is forwarded to the first server found that matches that name
   (if any), and that server is then required to answer the query.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER
       RPL_LINKS                       RPL_ENDOFLINKS
</code></pre>

<p>Examples:</p>

<p>Oikarinen &amp; Reed                                               [Page 28]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>LINKS *.au                      ; list all servers which have a name
                                that matches *.au;</p>

<p>:WiZ LINKS *.bu.edu *.edu       ; LINKS message from WiZ to the first
                                server matching *.edu for a list of
                                servers matching *.bu.edu.</p>

<p>4.3.4 Time message</p>

<pre><code>  Command: TIME
</code></pre>

<p>Parameters: [<server>]</p>

<p>The time message is used to query local time from the specified
   server. If the server parameter is not given, the server handling the
   command must reply to the query.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER                RPL_TIME
</code></pre>

<p>Examples:</p>

<p>TIME tolsun.oulu.fi             ; check the time on the server
                                   &#8220;tolson.oulu.fi&#8221;</p>

<p>Angel TIME <em>.au                 ; user angel checking the time on a
                                   server matching &#8220;</em>.au&#8221;</p>

<p>4.3.5 Connect message</p>

<pre><code>  Command: CONNECT
</code></pre>

<p>Parameters: <target server> [<port> [<remote server>]]</p>

<p>The CONNECT command can be used to force a server to try to establish
   a new connection to another server immediately.  CONNECT is a
   privileged command and is to be available only to IRC Operators.  If
   a remote server is given then the CONNECT attempt is made by that
   server to <target server> and <port>.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER                ERR_NOPRIVILEGES
       ERR_NEEDMOREPARAMS
</code></pre>

<p>Examples:</p>

<p>CONNECT tolsun.oulu.fi          ; Attempt to connect a server to
                                tolsun.oulu.fi</p>

<p>Oikarinen &amp; Reed                                               [Page 29]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>:WiZ CONNECT eff.org 6667 csd.bu.edu
                                ; CONNECT attempt by WiZ to get servers
                                eff.org and csd.bu.edu connected on port
                                6667.</p>

<p>4.3.6 Trace message</p>

<pre><code>  Command: TRACE
</code></pre>

<p>Parameters: [<server>]</p>

<p>TRACE command is used to find the route to specific server.  Each
   server that processes this message must tell the sender about it by
   sending a reply indicating it is a pass-through link, forming a chain
   of replies similar to that gained from using &#8220;traceroute&#8221;.  After
   sending this reply back, it must then send the TRACE message to the
   next server until given server is reached.  If the <server> parameter
   is omitted, it is recommended that TRACE command send a message to
   the sender telling which servers the current server has direct
   connection to.</p>

<p>If the destination given by &#8220;<server>&#8221; is an actual server, then the
   destination server is required to report all servers and users which
   are connected to it, although only operators are permitted to see
   users present.  If the destination given by <server> is a nickname,
   they only a reply for that nickname is given.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER
</code></pre>

<p>If the TRACE message is destined for another server, all intermediate
   servers must return a RPL_TRACELINK reply to indicate that the TRACE
   passed through it and where its going next.</p>

<pre><code>       RPL_TRACELINK
</code></pre>

<p>A TRACE reply may be composed of any number of the following numeric
   replies.</p>

<pre><code>       RPL_TRACECONNECTING             RPL_TRACEHANDSHAKE
       RPL_TRACEUNKNOWN                RPL_TRACEOPERATOR
       RPL_TRACEUSER                   RPL_TRACESERVER
       RPL_TRACESERVICE                RPL_TRACENEWTYPE
       RPL_TRACECLASS
</code></pre>

<p>Examples:</p>

<p>TRACE *.oulu.fi                 ; TRACE to a server matching *.oulu.fi</p>

<p>Oikarinen &amp; Reed                                               [Page 30]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>:WiZ TRACE AngelDust            ; TRACE issued by WiZ to nick AngelDust</p>

<p>4.3.7 Admin command</p>

<pre><code>  Command: ADMIN
</code></pre>

<p>Parameters: [<server>]</p>

<p>The admin message is used to find the name of the administrator of
   the given server, or current server if <server> parameter is omitted.
   Each server must have the ability to forward ADMIN messages to other
   servers.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER
       RPL_ADMINME                     RPL_ADMINLOC1
       RPL_ADMINLOC2                   RPL_ADMINEMAIL
</code></pre>

<p>Examples:</p>

<p>ADMIN tolsun.oulu.fi            ; request an ADMIN reply from
                                   tolsun.oulu.fi</p>

<p>:WiZ ADMIN *.edu                ; ADMIN request from WiZ for first
                                   server found to match *.edu.</p>

<p>4.3.8 Info command</p>

<pre><code>  Command: INFO
</code></pre>

<p>Parameters: [<server>]</p>

<p>The INFO command is required to return information which describes
   the server: its version, when it was compiled, the patchlevel, when
   it was started, and any other miscellaneous information which may be
   considered to be relevant.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER
       RPL_INFO                        RPL_ENDOFINFO
</code></pre>

<p>Examples:</p>

<p>INFO csd.bu.edu                 ; request an INFO reply from
   csd.bu.edu</p>

<p>:Avalon INFO *.fi               ; INFO request from Avalon for first
                                   server found to match *.fi.</p>

<p>Oikarinen &amp; Reed                                               [Page 31]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>INFO Angel                      ; request info from the server that
                                   Angel is connected to.</p>

<p>4.4 Sending messages</p>

<p>The main purpose of the IRC protocol is to provide a base for clients
   to communicate with each other.  PRIVMSG and NOTICE are the only
   messages available which actually perform delivery of a text message
   from one client to another - the rest just make it possible and try
   to ensure it happens in a reliable and structured manner.</p>

<p>4.4.1 Private messages</p>

<pre><code>  Command: PRIVMSG
</code></pre>

<p>Parameters: <receiver>{,<receiver>} <text to be sent></p>

<p>PRIVMSG is used to send private messages between users.  <receiver>
   is the nickname of the receiver of the message.  <receiver> can also
   be a list of names or channels separated with commas.</p>

<p>The <receiver> parameter may also me a host mask  (#mask)  or  server
   mask  ($mask).   In  both cases the server will only send the PRIVMSG
   to those who have a server or host matching the mask.  The mask  must
   have at  least  1  (one)  &#8220;.&#8221;  in it and no wildcards following the
   last &#8220;.&#8221;.  This requirement exists to prevent people sending messages
   to  &#8220;#<em>&#8221;  or &#8220;$</em>&#8221;,  which  would  broadcast  to  all  users; from
   experience, this is abused more than used responsibly and properly.
   Wildcards are  the  &#8216;*&#8217; and  &#8216;?&#8217;   characters.   This  extension  to
   the PRIVMSG command is only available to Operators.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NORECIPIENT                 ERR_NOTEXTTOSEND
       ERR_CANNOTSENDTOCHAN            ERR_NOTOPLEVEL
       ERR_WILDTOPLEVEL                ERR_TOOMANYTARGETS
       ERR_NOSUCHNICK
       RPL_AWAY
</code></pre>

<p>Examples:</p>

<p>:Angel PRIVMSG Wiz :Hello are you receiving this message ?
                                ; Message from Angel to Wiz.</p>

<p>PRIVMSG Angel :yes I&#8217;m receiving it !receiving it !&#8217;u>(768u+1n) .br ;
                                Message to Angel.</p>

<p>PRIVMSG jto@tolsun.oulu.fi :Hello !
                                ; Message to a client on server</p>

<p>Oikarinen &amp; Reed                                               [Page 32]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                            tolsun.oulu.fi with username of "jto".
</code></pre>

<p>PRIVMSG $*.fi :Server tolsun.oulu.fi rebooting.
                                ; Message to everyone on a server which
                                has a name matching *.fi.</p>

<p>PRIVMSG #*.edu :NSFNet is undergoing work, expect interruptions
                                ; Message to all users who come from a
                                host which has a name matching *.edu.</p>

<p>4.4.2 Notice</p>

<pre><code>  Command: NOTICE
</code></pre>

<p>Parameters: <nickname> <text></p>

<p>The NOTICE message is used similarly to PRIVMSG.  The difference
   between NOTICE and PRIVMSG is that automatic replies must never be
   sent in response to a NOTICE message.  This rule applies to servers
   too - they must not send any error reply back to the client on
   receipt of a notice.  The object of this rule is to avoid loops
   between a client automatically sending something in response to
   something it received.  This is typically used by automatons (clients
   with either an AI or other interactive program controlling their
   actions) which are always seen to be replying lest they end up in a
   loop with another automaton.</p>

<p>See PRIVMSG for more details on replies and examples.</p>

<p>4.5 User based queries</p>

<p>User queries are a group of commands which are primarily concerned
   with finding details on a particular user or group users.  When using
   wildcards with any of these commands, if they match, they will only
   return information on users who are &#8216;visible&#8217; to you.  The visibility
   of a user is determined as a combination of the user&#8217;s mode and the
   common set of channels you are both on.</p>

<p>4.5.1 Who query</p>

<pre><code>  Command: WHO
</code></pre>

<p>Parameters: [<name> [<o>]]</p>

<p>The WHO message is used by a client to generate a query which returns
   a list of information which &#8216;matches&#8217; the <name> parameter given by
   the client.  In the absence of the <name> parameter, all visible
   (users who aren&#8217;t invisible (user mode +i) and who don&#8217;t have a
   common channel with the requesting client) are listed.  The same
   result can be achieved by using a <name> of &#8220;0&#8221; or any wildcard which</p>

<p>Oikarinen &amp; Reed                                               [Page 33]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>will end up matching every entry possible.</p>

<p>The <name> passed to WHO is matched against users&#8217; host, server, real
   name and nickname if the channel <name> cannot be found.</p>

<p>If the &#8220;o&#8221; parameter is passed only operators are returned according
   to the name mask supplied.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER
       RPL_WHOREPLY                    RPL_ENDOFWHO
</code></pre>

<p>Examples:</p>

<p>WHO <em>.fi                        ; List all users who match against
                                   &#8220;</em>.fi&#8221;.</p>

<p>WHO jto* o                      ; List all users with a match against
                                   &#8220;jto*&#8221; if they are an operator.</p>

<p>4.5.2 Whois query</p>

<pre><code>  Command: WHOIS
</code></pre>

<p>Parameters: [<server>] <nickmask>[,<nickmask>[,&#8230;]]</p>

<p>This message is used to query information about particular user.  The
   server will answer this message with several numeric messages
   indicating different statuses of each user which matches the nickmask
   (if you are entitled to see them).  If no wildcard is present in the
   <nickmask>, any information about that nick which you are allowed to
   see is presented.  A comma (&#8216;,&#8217;) separated list of nicknames may be
   given.</p>

<p>The latter version sends the query to a specific server.  It is
   useful if you want to know how long the user in question has been
   idle as only local server (ie. the server the user is directly
   connected to) knows that information, while everything else is
   globally known.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER                ERR_NONICKNAMEGIVEN
       RPL_WHOISUSER                   RPL_WHOISCHANNELS
       RPL_WHOISCHANNELS               RPL_WHOISSERVER
       RPL_AWAY                        RPL_WHOISOPERATOR
       RPL_WHOISIDLE                   ERR_NOSUCHNICK
       RPL_ENDOFWHOIS
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 34]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Examples:</p>

<p>WHOIS wiz                       ; return available user information
                                   about nick WiZ</p>

<p>WHOIS eff.org trillian          ; ask server eff.org for user
                                   information about trillian</p>

<p>4.5.3 Whowas</p>

<pre><code>  Command: WHOWAS
</code></pre>

<p>Parameters: <nickname> [<count> [<server>]]</p>

<p>Whowas asks for information about a nickname which no longer exists.
   This may either be due to a nickname change or the user leaving IRC.
   In response to this query, the server searches through its nickname
   history, looking for any nicks which are lexically the same (no wild
   card matching here).  The history is searched backward, returning the
   most recent entry first.  If there are multiple entries, up to
   <count> replies will be returned (or all of them if no <count>
   parameter is given).  If a non-positive number is passed as being
   <count>, then a full search is done.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NONICKNAMEGIVEN             ERR_WASNOSUCHNICK
       RPL_WHOWASUSER                  RPL_WHOISSERVER
       RPL_ENDOFWHOWAS
</code></pre>

<p>Examples:</p>

<p>WHOWAS Wiz                      ; return all information in the nick
                                   history about nick &#8220;WiZ&#8221;;</p>

<p>WHOWAS Mermaid 9                ; return at most, the 9 most recent
                                   entries in the nick history for
                                   &#8220;Mermaid&#8221;;</p>

<p>WHOWAS Trillian 1 <em>.edu         ; return the most recent history for
                                   &#8220;Trillian&#8221; from the first server found
                                   to match &#8220;</em>.edu&#8221;.</p>

<p>4.6 Miscellaneous messages</p>

<p>Messages in this category do not fit into any of the above categories
   but are nonetheless still a part of and required by the protocol.</p>

<p>Oikarinen &amp; Reed                                               [Page 35]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>4.6.1 Kill message</p>

<pre><code>  Command: KILL
</code></pre>

<p>Parameters: <nickname> <comment></p>

<p>The KILL message is used to cause a client-server connection to be
   closed by the server which has the actual connection.  KILL is used
   by servers when they encounter a duplicate entry in the list of valid
   nicknames and is used to remove both entries.  It is also available
   to operators.</p>

<p>Clients which have automatic reconnect algorithms effectively make
   this command useless since the disconnection is only brief.  It does
   however break the flow of data and can be used to stop large amounts
   of being abused, any user may elect to receive KILL messages
   generated for others to keep an &#8216;eye&#8217; on would be trouble spots.</p>

<p>In an arena where nicknames are required to be globally unique at all
   times, KILL messages are sent whenever &#8216;duplicates&#8217; are detected
   (that is an attempt to register two users with the same nickname) in
   the hope that both of them will disappear and only 1 reappear.</p>

<p>The comment given must reflect the actual reason for the KILL.  For
   server-generated KILLs it usually is made up of details concerning
   the origins of the two conflicting nicknames.  For users it is left
   up to them to provide an adequate reason to satisfy others who see
   it.  To prevent/discourage fake KILLs from being generated to hide
   the identify of the KILLer, the comment also shows a &#8216;kill-path&#8217;
   which is updated by each server it passes through, each prepending
   its name to the path.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOPRIVILEGES                ERR_NEEDMOREPARAMS
       ERR_NOSUCHNICK                  ERR_CANTKILLSERVER
</code></pre>

<p>KILL David (csd.bu.edu &lt;- tolsun.oulu.fi)
                                   ; Nickname collision between csd.bu.edu
                                   and tolson.oulu.fi</p>

<p>NOTE:
   It is recommended that only Operators be allowed to kill other users
   with KILL message.  In an ideal world not even operators would need
   to do this and it would be left to servers to deal with.</p>

<p>Oikarinen &amp; Reed                                               [Page 36]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>4.6.2 Ping message</p>

<pre><code>  Command: PING
</code></pre>

<p>Parameters: <server1> [<server2>]</p>

<p>The PING message is used to test the presence of an active client at
   the other end of the connection.  A PING message is sent at regular
   intervals if no other activity detected coming from a connection.  If
   a connection fails to respond to a PING command within a set amount
   of time, that connection is closed.</p>

<p>Any client which receives a PING message must respond to <server1>
   (server which sent the PING message out) as quickly as possible with
   an appropriate PONG message to indicate it is still there and alive.
   Servers should not respond to PING commands but rely on PINGs from
   the other end of the connection to indicate the connection is alive.
   If the <server2> parameter is specified, the PING message gets
   forwarded there.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOORIGIN                    ERR_NOSUCHSERVER
</code></pre>

<p>Examples:</p>

<p>PING tolsun.oulu.fi             ; server sending a PING message to
                                   another server to indicate it is still
                                   alive.</p>

<p>PING WiZ                        ; PING message being sent to nick WiZ</p>

<p>4.6.3 Pong message</p>

<pre><code>  Command: PONG
</code></pre>

<p>Parameters: <daemon> [<daemon2>]</p>

<p>PONG message is a reply to ping message.  If parameter <daemon2> is
   given this message must be forwarded to given daemon.  The <daemon>
   parameter is the name of the daemon who has responded to PING message
   and generated this message.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOORIGIN                    ERR_NOSUCHSERVER
</code></pre>

<p>Examples:</p>

<p>PONG csd.bu.edu tolsun.oulu.fi  ; PONG message from csd.bu.edu to</p>

<p>Oikarinen &amp; Reed                                               [Page 37]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                               tolsun.oulu.fi
</code></pre>

<p>4.6.4 Error</p>

<pre><code>  Command: ERROR
</code></pre>

<p>Parameters: <error message></p>

<p>The ERROR command is for use by servers when reporting a serious or
   fatal error to its operators.  It may also be sent from one server to
   another but must not be accepted from any normal unknown clients.</p>

<p>An ERROR message is for use for reporting errors which occur with a
   server-to-server link only.  An ERROR message is sent to the server
   at the other end (which sends it to all of its connected operators)
   and to all operators currently connected.  It is not to be passed
   onto any other servers by a server if it is received from a server.</p>

<p>When a server sends a received ERROR message to its operators, the
   message should be encapsulated inside a NOTICE message, indicating
   that the client was not responsible for the error.</p>

<p>Numerics:</p>

<pre><code>       None.
</code></pre>

<p>Examples:</p>

<p>ERROR :Server *.fi already exists; ERROR message to the other server
                                   which caused this error.</p>

<p>NOTICE WiZ :ERROR from csd.bu.edu &#8212; Server *.fi already exists
                                   ; Same ERROR message as above but sent
                                   to user WiZ on the other server.</p>

<ol>
<li><p>OPTIONALS</p>

<p>This section describes OPTIONAL messages.  They are not required in a
working server implementation of the protocol described herein.  In
the absence of the option, an error reply message must be generated
or an unknown command error.  If the message is destined for another
server to answer then it must be passed on (elementary parsing
required) The allocated numerics for this are listed with the
messages below.</p></li>
</ol>

<p>5.1 Away</p>

<pre><code>  Command: AWAY
</code></pre>

<p>Parameters: [message]</p>

<p>Oikarinen &amp; Reed                                               [Page 38]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>With the AWAY message, clients can set an automatic reply string for
   any PRIVMSG commands directed at them (not to a channel they are on).
   The automatic reply is sent by the server to client sending the
   PRIVMSG command.  The only replying server is the one to which the
   sending client is connected to.</p>

<p>The AWAY message is used either with one parameter (to set an AWAY
   message) or with no parameters (to remove the AWAY message).</p>

<p>Numeric Replies:</p>

<pre><code>       RPL_UNAWAY                      RPL_NOWAWAY
</code></pre>

<p>Examples:</p>

<p>AWAY :Gone to lunch.  Back in 5 ; set away message to &#8220;Gone to lunch.
                                   Back in 5&#8221;.</p>

<p>:WiZ AWAY                       ; unmark WiZ as being away.</p>

<p>5.2 Rehash message</p>

<pre><code>  Command: REHASH
</code></pre>

<p>Parameters: None</p>

<p>The rehash message can be used by the operator to force the server to
   re-read and process its configuration file.</p>

<p>Numeric Replies:</p>

<pre><code>    RPL_REHASHING                   ERR_NOPRIVILEGES
</code></pre>

<p>Examples:</p>

<p>REHASH                          ; message from client with operator
                                status to server asking it to reread its
                                configuration file.</p>

<p>5.3 Restart message</p>

<pre><code>  Command: RESTART
</code></pre>

<p>Parameters: None</p>

<p>The restart message can only be used by an operator to force a server
   restart itself.  This message is optional since it may be viewed as a
   risk to allow arbitrary people to connect to a server as an operator
   and execute this command, causing (at least) a disruption to service.</p>

<p>Oikarinen &amp; Reed                                               [Page 39]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>The RESTART command must always be fully processed by the server to
   which the sending client is connected and not be passed onto other
   connected servers.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOPRIVILEGES
</code></pre>

<p>Examples:</p>

<p>RESTART                         ; no parameters required.</p>

<p>5.4 Summon message</p>

<pre><code>  Command: SUMMON
</code></pre>

<p>Parameters: <user> [<server>]</p>

<p>The SUMMON command can be used to give users who are on a host
   running an IRC server a message asking them to please join IRC.  This
   message is only sent if the target server (a) has SUMMON enabled, (b)
   the user is logged in and (c) the server process can write to the
   user&#8217;s tty (or similar).</p>

<p>If no <server> parameter is given it tries to summon <user> from the
   server the client is connected to is assumed as the target.</p>

<p>If summon is not enabled in a server, it must return the
   ERR_SUMMONDISABLED numeric and pass the summon message onwards.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NORECIPIENT                 ERR_FILEERROR
       ERR_NOLOGIN                     ERR_NOSUCHSERVER
       RPL_SUMMONING
</code></pre>

<p>Examples:</p>

<p>SUMMON jto                      ; summon user jto on the server&#8217;s host</p>

<p>SUMMON jto tolsun.oulu.fi       ; summon user jto on the host which a
                                   server named &#8220;tolsun.oulu.fi&#8221; is
                                   running.</p>

<p>5.5 Users</p>

<pre><code>  Command: USERS
</code></pre>

<p>Parameters: [<server>]</p>

<p>Oikarinen &amp; Reed                                               [Page 40]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>The USERS command returns a list of users logged into the server in a
   similar  format  to  who(1),  rusers(1)  and finger(1).  Some people
   may disable this command on their server for security related
   reasons.   If disabled, the correct numeric must be returned to
   indicate this.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NOSUCHSERVER                ERR_FILEERROR
       RPL_USERSSTART                  RPL_USERS
       RPL_NOUSERS                     RPL_ENDOFUSERS
       ERR_USERSDISABLED
</code></pre>

<p>Disabled Reply:</p>

<pre><code>       ERR_USERSDISABLED
</code></pre>

<p>Examples:</p>

<p>USERS eff.org                   ; request a list of users logged in on
                                server eff.org</p>

<p>:John USERS tolsun.oulu.fi      ; request from John for a list of users
                                logged in on server tolsun.oulu.fi</p>

<p>5.6 Operwall message</p>

<pre><code>  Command: WALLOPS
</code></pre>

<p>Parameters: Text to be sent to all operators currently online</p>

<p>Sends  a  message  to  all   operators   currently   online.    After
   implementing  WALLOPS  as  a user command it was found that it was
   often and commonly abused as a means of sending a message to a lot
   of  people (much  similar to WALL).  Due to this it is recommended
   that the current implementation of  WALLOPS  be  used  as  an
   example  by  allowing  and recognising only servers as the senders of
   WALLOPS.</p>

<p>Numeric Replies:</p>

<pre><code>       ERR_NEEDMOREPARAMS
</code></pre>

<p>Examples:</p>

<p>:csd.bu.edu WALLOPS :Connect &#8216;*.uiuc.edu 6667&#8217; from Joshua; WALLOPS
                                   message from csd.bu.edu announcing a
                                   CONNECT message it received and acted
                                   upon from Joshua.</p>

<p>Oikarinen &amp; Reed                                               [Page 41]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>5.7 Userhost message</p>

<pre><code>  Command: USERHOST
</code></pre>

<p>Parameters: <nickname>{<space><nickname>}</p>

<p>The USERHOST command takes a list of up to 5 nicknames, each
   separated by a space character and returns a list of information
   about each nickname that it found.  The returned list has each reply
   separated by a space.</p>

<p>Numeric Replies:</p>

<pre><code>       RPL_USERHOST                    ERR_NEEDMOREPARAMS
</code></pre>

<p>Examples:</p>

<p>USERHOST Wiz Michael Marty p    ;USERHOST request for information on
                                   nicks &#8220;Wiz&#8221;, &#8220;Michael&#8221;, &#8220;Marty&#8221; and &#8220;p&#8221;</p>

<p>5.8 Ison message</p>

<pre><code>  Command: ISON
</code></pre>

<p>Parameters: <nickname>{<space><nickname>}</p>

<p>The ISON command was implemented to provide  a  quick  and  efficient
   means  to get a response about whether a given nickname was currently
   on IRC. ISON only takes one (1) parameter: a space-separated list of
   nicks.  For  each  nickname in the list that is present, the server
   adds that to its reply string.  Thus the reply string may return
   empty (none  of  the given  nicks are present), an exact copy of the
   parameter string (all of them present) or as any other subset of the
   set of nicks  given  in  the parameter.  The only limit on the number
   of nicks that may be checked is that the combined length must not be
   too large as to cause the server to chop it off so it fits in 512
   characters.</p>

<p>ISON is only be processed by the server local to the client sending
   the command and thus not passed onto other servers for further
   processing.</p>

<p>Numeric Replies:</p>

<pre><code>       RPL_ISON                ERR_NEEDMOREPARAMS
</code></pre>

<p>Examples:</p>

<p>ISON phone trillian WiZ jarlek Avalon Angel Monstah
                                   ; Sample ISON request for 7 nicks.</p>

<p>Oikarinen &amp; Reed                                               [Page 42]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<ol>
<li><p>REPLIES</p>

<p>The following is a list of numeric replies which are generated in
response to the commands given above.  Each numeric is given with its
number, name and reply string.</p></li>
</ol>

<p>6.1 Error Replies.</p>

<pre><code>    401     ERR_NOSUCHNICK
                    "&lt;nickname&gt; :No such nick/channel"

            - Used to indicate the nickname parameter supplied to a
              command is currently unused.

    402     ERR_NOSUCHSERVER
                    "&lt;server name&gt; :No such server"

            - Used to indicate the server name given currently
              doesn't exist.

    403     ERR_NOSUCHCHANNEL
                    "&lt;channel name&gt; :No such channel"

            - Used to indicate the given channel name is invalid.

    404     ERR_CANNOTSENDTOCHAN
                    "&lt;channel name&gt; :Cannot send to channel"

            - Sent to a user who is either (a) not on a channel
              which is mode +n or (b) not a chanop (or mode +v) on
              a channel which has mode +m set and is trying to send
              a PRIVMSG message to that channel.

    405     ERR_TOOMANYCHANNELS
                    "&lt;channel name&gt; :You have joined too many \
                     channels"
            - Sent to a user when they have joined the maximum
              number of allowed channels and they try to join
              another channel.

    406     ERR_WASNOSUCHNICK
                    "&lt;nickname&gt; :There was no such nickname"

            - Returned by WHOWAS to indicate there is no history
              information for that nickname.

    407     ERR_TOOMANYTARGETS
                    "&lt;target&gt; :Duplicate recipients. No message \
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 43]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                     delivered"

            - Returned to a client which is attempting to send a
              PRIVMSG/NOTICE using the user@host destination format
              and for a user@host which has several occurrences.

    409     ERR_NOORIGIN
                    ":No origin specified"

            - PING or PONG message missing the originator parameter
              which is required since these commands must work
              without valid prefixes.

    411     ERR_NORECIPIENT
                    ":No recipient given (&lt;command&gt;)"
    412     ERR_NOTEXTTOSEND
                    ":No text to send"
    413     ERR_NOTOPLEVEL
                    "&lt;mask&gt; :No toplevel domain specified"
    414     ERR_WILDTOPLEVEL
                    "&lt;mask&gt; :Wildcard in toplevel domain"

            - 412 - 414 are returned by PRIVMSG to indicate that
              the message wasn't delivered for some reason.
              ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that
              are returned when an invalid use of
              "PRIVMSG $&lt;server&gt;" or "PRIVMSG #&lt;host&gt;" is attempted.

    421     ERR_UNKNOWNCOMMAND
                    "&lt;command&gt; :Unknown command"

            - Returned to a registered client to indicate that the
              command sent is unknown by the server.

    422     ERR_NOMOTD
                    ":MOTD File is missing"

            - Server's MOTD file could not be opened by the server.

    423     ERR_NOADMININFO
                    "&lt;server&gt; :No administrative info available"

            - Returned by a server in response to an ADMIN message
              when there is an error in finding the appropriate
              information.

    424     ERR_FILEERROR
            ":File error doing &lt;file op&gt; on &lt;file&gt;"
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 44]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>            - Generic error message used to report a failed file
              operation during the processing of a message.

    431     ERR_NONICKNAMEGIVEN
                    ":No nickname given"

            - Returned when a nickname parameter expected for a
              command and isn't found.

    432     ERR_ERRONEUSNICKNAME
                    "&lt;nick&gt; :Erroneus nickname"

            - Returned after receiving a NICK message which contains
              characters which do not fall in the defined set.  See
              section x.x.x for details on valid nicknames.

    433     ERR_NICKNAMEINUSE
                    "&lt;nick&gt; :Nickname is already in use"

            - Returned when a NICK message is processed that results
              in an attempt to change to a currently existing
              nickname.

    436     ERR_NICKCOLLISION
                    "&lt;nick&gt; :Nickname collision KILL"

            - Returned by a server to a client when it detects a
              nickname collision (registered of a NICK that
              already exists by another server).

    441     ERR_USERNOTINCHANNEL
                    "&lt;nick&gt; &lt;channel&gt; :They aren't on that channel"

            - Returned by the server to indicate that the target
              user of the command is not on the given channel.

    442     ERR_NOTONCHANNEL
                    "&lt;channel&gt; :You're not on that channel"

            - Returned by the server whenever a client tries to
              perform a channel effecting command for which the
              client isn't a member.

    443     ERR_USERONCHANNEL
                    "&lt;user&gt; &lt;channel&gt; :is already on channel"

            - Returned when a client tries to invite a user to a
              channel they are already on.
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 45]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>    444     ERR_NOLOGIN
                    "&lt;user&gt; :User not logged in"

            - Returned by the summon after a SUMMON command for a
              user was unable to be performed since they were not
              logged in.

    445     ERR_SUMMONDISABLED
                    ":SUMMON has been disabled"

            - Returned as a response to the SUMMON command.  Must be
              returned by any server which does not implement it.

    446     ERR_USERSDISABLED
                    ":USERS has been disabled"

            - Returned as a response to the USERS command.  Must be
              returned by any server which does not implement it.

    451     ERR_NOTREGISTERED
                    ":You have not registered"

            - Returned by the server to indicate that the client
              must be registered before the server will allow it
              to be parsed in detail.

    461     ERR_NEEDMOREPARAMS
                    "&lt;command&gt; :Not enough parameters"

            - Returned by the server by numerous commands to
              indicate to the client that it didn't supply enough
              parameters.

    462     ERR_ALREADYREGISTRED
                    ":You may not reregister"

            - Returned by the server to any link which tries to
              change part of the registered details (such as
              password or user details from second USER message).


    463     ERR_NOPERMFORHOST
                    ":Your host isn't among the privileged"

            - Returned to a client which attempts to register with
              a server which does not been setup to allow
              connections from the host the attempted connection
              is tried.
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 46]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>    464     ERR_PASSWDMISMATCH
                    ":Password incorrect"

            - Returned to indicate a failed attempt at registering
              a connection for which a password was required and
              was either not given or incorrect.

    465     ERR_YOUREBANNEDCREEP
                    ":You are banned from this server"

            - Returned after an attempt to connect and register
              yourself with a server which has been setup to
              explicitly deny connections to you.

    467     ERR_KEYSET
                    "&lt;channel&gt; :Channel key already set"
    471     ERR_CHANNELISFULL
                    "&lt;channel&gt; :Cannot join channel (+l)"
    472     ERR_UNKNOWNMODE
                    "&lt;char&gt; :is unknown mode char to me"
    473     ERR_INVITEONLYCHAN
                    "&lt;channel&gt; :Cannot join channel (+i)"
    474     ERR_BANNEDFROMCHAN
                    "&lt;channel&gt; :Cannot join channel (+b)"
    475     ERR_BADCHANNELKEY
                    "&lt;channel&gt; :Cannot join channel (+k)"
    481     ERR_NOPRIVILEGES
                    ":Permission Denied- You're not an IRC operator"

            - Any command requiring operator privileges to operate
              must return this error to indicate the attempt was
              unsuccessful.

    482     ERR_CHANOPRIVSNEEDED
                    "&lt;channel&gt; :You're not channel operator"

            - Any command requiring 'chanop' privileges (such as
              MODE messages) must return this error if the client
              making the attempt is not a chanop on the specified
              channel.

    483     ERR_CANTKILLSERVER
                    ":You cant kill a server!"

            - Any attempts to use the KILL command on a server
              are to be refused and this error returned directly
              to the client.
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 47]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>    491     ERR_NOOPERHOST
                    ":No O-lines for your host"

            - If a client sends an OPER message and the server has
              not been configured to allow connections from the
              client's host as an operator, this error must be
              returned.

    501     ERR_UMODEUNKNOWNFLAG
                    ":Unknown MODE flag"

            - Returned by the server to indicate that a MODE
              message was sent with a nickname parameter and that
              the a mode flag sent was not recognized.

    502     ERR_USERSDONTMATCH
                    ":Cant change mode for other users"

            - Error sent to any user trying to view or change the
              user mode for a user other than themselves.
</code></pre>

<p>6.2 Command responses.</p>

<pre><code>    300     RPL_NONE
                    Dummy reply number. Not used.

    302     RPL_USERHOST
                    ":[&lt;reply&gt;{&lt;space&gt;&lt;reply&gt;}]"

            - Reply format used by USERHOST to list replies to
              the query list.  The reply string is composed as
              follows:

              &lt;reply&gt; ::= &lt;nick&gt;['*'] '=' &lt;'+'|'-'&gt;&lt;hostname&gt;

              The '*' indicates whether the client has registered
              as an Operator.  The '-' or '+' characters represent
              whether the client has set an AWAY message or not
              respectively.

    303     RPL_ISON
                    ":[&lt;nick&gt; {&lt;space&gt;&lt;nick&gt;}]"

            - Reply format used by ISON to list replies to the
              query list.

    301     RPL_AWAY
                    "&lt;nick&gt; :&lt;away message&gt;"
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 48]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>    305     RPL_UNAWAY
                    ":You are no longer marked as being away"
    306     RPL_NOWAWAY
                    ":You have been marked as being away"

            - These replies are used with the AWAY command (if
              allowed).  RPL_AWAY is sent to any client sending a
              PRIVMSG to a client which is away.  RPL_AWAY is only
              sent by the server to which the client is connected.
              Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the
              client removes and sets an AWAY message.

    311     RPL_WHOISUSER
                    "&lt;nick&gt; &lt;user&gt; &lt;host&gt; * :&lt;real name&gt;"
    312     RPL_WHOISSERVER
                    "&lt;nick&gt; &lt;server&gt; :&lt;server info&gt;"
    313     RPL_WHOISOPERATOR
                    "&lt;nick&gt; :is an IRC operator"
    317     RPL_WHOISIDLE
                    "&lt;nick&gt; &lt;integer&gt; :seconds idle"
    318     RPL_ENDOFWHOIS
                    "&lt;nick&gt; :End of /WHOIS list"
    319     RPL_WHOISCHANNELS
                    "&lt;nick&gt; :{[@|+]&lt;channel&gt;&lt;space&gt;}"

            - Replies 311 - 313, 317 - 319 are all replies
              generated in response to a WHOIS message.  Given that
              there are enough parameters present, the answering
              server must either formulate a reply out of the above
              numerics (if the query nick is found) or return an
              error reply.  The '*' in RPL_WHOISUSER is there as
              the literal character and not as a wild card.  For
              each reply set, only RPL_WHOISCHANNELS may appear
              more than once (for long lists of channel names).
              The '@' and '+' characters next to the channel name
              indicate whether a client is a channel operator or
              has been granted permission to speak on a moderated
              channel.  The RPL_ENDOFWHOIS reply is used to mark
              the end of processing a WHOIS message.

    314     RPL_WHOWASUSER
                    "&lt;nick&gt; &lt;user&gt; &lt;host&gt; * :&lt;real name&gt;"
    369     RPL_ENDOFWHOWAS
                    "&lt;nick&gt; :End of WHOWAS"

            - When replying to a WHOWAS message, a server must use
              the replies RPL_WHOWASUSER, RPL_WHOISSERVER or
              ERR_WASNOSUCHNICK for each nickname in the presented
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 49]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>              list.  At the end of all reply batches, there must
              be RPL_ENDOFWHOWAS (even if there was only one reply
              and it was an error).

    321     RPL_LISTSTART
                    "Channel :Users  Name"
    322     RPL_LIST
                    "&lt;channel&gt; &lt;# visible&gt; :&lt;topic&gt;"
    323     RPL_LISTEND
                    ":End of /LIST"

            - Replies RPL_LISTSTART, RPL_LIST, RPL_LISTEND mark
              the start, actual replies with data and end of the
              server's response to a LIST command.  If there are
              no channels available to return, only the start
              and end reply must be sent.

    324     RPL_CHANNELMODEIS
                    "&lt;channel&gt; &lt;mode&gt; &lt;mode params&gt;"

    331     RPL_NOTOPIC
                    "&lt;channel&gt; :No topic is set"
    332     RPL_TOPIC
                    "&lt;channel&gt; :&lt;topic&gt;"

            - When sending a TOPIC message to determine the
              channel topic, one of two replies is sent.  If
              the topic is set, RPL_TOPIC is sent back else
              RPL_NOTOPIC.

    341     RPL_INVITING
                    "&lt;channel&gt; &lt;nick&gt;"

            - Returned by the server to indicate that the
              attempted INVITE message was successful and is
              being passed onto the end client.

    342     RPL_SUMMONING
                    "&lt;user&gt; :Summoning user to IRC"

            - Returned by a server answering a SUMMON message to
              indicate that it is summoning that user.

    351     RPL_VERSION
                    "&lt;version&gt;.&lt;debuglevel&gt; &lt;server&gt; :&lt;comments&gt;"

            - Reply by the server showing its version details.
              The &lt;version&gt; is the version of the software being
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 50]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>              used (including any patchlevel revisions) and the
              &lt;debuglevel&gt; is used to indicate if the server is
              running in "debug mode".

              The "comments" field may contain any comments about
              the version or further version details.

    352     RPL_WHOREPLY
                    "&lt;channel&gt; &lt;user&gt; &lt;host&gt; &lt;server&gt; &lt;nick&gt; \
                     &lt;H|G&gt;[*][@|+] :&lt;hopcount&gt; &lt;real name&gt;"
    315     RPL_ENDOFWHO
                    "&lt;name&gt; :End of /WHO list"

            - The RPL_WHOREPLY and RPL_ENDOFWHO pair are used
              to answer a WHO message.  The RPL_WHOREPLY is only
              sent if there is an appropriate match to the WHO
              query.  If there is a list of parameters supplied
              with a WHO message, a RPL_ENDOFWHO must be sent
              after processing each list item with &lt;name&gt; being
              the item.

    353     RPL_NAMREPLY
                    "&lt;channel&gt; :[[@|+]&lt;nick&gt; [[@|+]&lt;nick&gt; [...]]]"
    366     RPL_ENDOFNAMES
                    "&lt;channel&gt; :End of /NAMES list"

            - To reply to a NAMES message, a reply pair consisting
              of RPL_NAMREPLY and RPL_ENDOFNAMES is sent by the
              server back to the client.  If there is no channel
              found as in the query, then only RPL_ENDOFNAMES is
              returned.  The exception to this is when a NAMES
              message is sent with no parameters and all visible
              channels and contents are sent back in a series of
              RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark
              the end.

    364     RPL_LINKS
                    "&lt;mask&gt; &lt;server&gt; :&lt;hopcount&gt; &lt;server info&gt;"
    365     RPL_ENDOFLINKS
                    "&lt;mask&gt; :End of /LINKS list"

            - In replying to the LINKS message, a server must send
              replies back using the RPL_LINKS numeric and mark the
              end of the list using an RPL_ENDOFLINKS reply.

    367     RPL_BANLIST
                    "&lt;channel&gt; &lt;banid&gt;"
    368     RPL_ENDOFBANLIST
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 51]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                    "&lt;channel&gt; :End of channel ban list"

            - When listing the active 'bans' for a given channel,
              a server is required to send the list back using the
              RPL_BANLIST and RPL_ENDOFBANLIST messages.  A separate
              RPL_BANLIST is sent for each active banid.  After the
              banids have been listed (or if none present) a
              RPL_ENDOFBANLIST must be sent.

    371     RPL_INFO
                    ":&lt;string&gt;"
    374     RPL_ENDOFINFO
                    ":End of /INFO list"

            - A server responding to an INFO message is required to
              send all its 'info' in a series of RPL_INFO messages
              with a RPL_ENDOFINFO reply to indicate the end of the
              replies.

    375     RPL_MOTDSTART
                    ":- &lt;server&gt; Message of the day - "
    372     RPL_MOTD
                    ":- &lt;text&gt;"
    376     RPL_ENDOFMOTD
                    ":End of /MOTD command"

            - When responding to the MOTD message and the MOTD file
              is found, the file is displayed line by line, with
              each line no longer than 80 characters, using
              RPL_MOTD format replies.  These should be surrounded
              by a RPL_MOTDSTART (before the RPL_MOTDs) and an
              RPL_ENDOFMOTD (after).

    381     RPL_YOUREOPER
                    ":You are now an IRC operator"

            - RPL_YOUREOPER is sent back to a client which has
              just successfully issued an OPER message and gained
              operator status.

    382     RPL_REHASHING
                    "&lt;config file&gt; :Rehashing"

            - If the REHASH option is used and an operator sends
              a REHASH message, an RPL_REHASHING is sent back to
              the operator.

    391     RPL_TIME
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 52]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                    "&lt;server&gt; :&lt;string showing server's local time&gt;"

            - When replying to the TIME message, a server must send
              the reply using the RPL_TIME format above.  The string
              showing the time need only contain the correct day and
              time there.  There is no further requirement for the
              time string.

    392     RPL_USERSSTART
                    ":UserID   Terminal  Host"
    393     RPL_USERS
                    ":%-8s %-9s %-8s"
    394     RPL_ENDOFUSERS
                    ":End of users"
    395     RPL_NOUSERS
                    ":Nobody logged in"

            - If the USERS message is handled by a server, the
              replies RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and
              RPL_NOUSERS are used.  RPL_USERSSTART must be sent
              first, following by either a sequence of RPL_USERS
              or a single RPL_NOUSER.  Following this is
              RPL_ENDOFUSERS.

    200     RPL_TRACELINK
                    "Link &lt;version &amp; debug level&gt; &lt;destination&gt; \
                     &lt;next server&gt;"
    201     RPL_TRACECONNECTING
                    "Try. &lt;class&gt; &lt;server&gt;"
    202     RPL_TRACEHANDSHAKE
                    "H.S. &lt;class&gt; &lt;server&gt;"
    203     RPL_TRACEUNKNOWN
                    "???? &lt;class&gt; [&lt;client IP address in dot form&gt;]"
    204     RPL_TRACEOPERATOR
                    "Oper &lt;class&gt; &lt;nick&gt;"
    205     RPL_TRACEUSER
                    "User &lt;class&gt; &lt;nick&gt;"
    206     RPL_TRACESERVER
                    "Serv &lt;class&gt; &lt;int&gt;S &lt;int&gt;C &lt;server&gt; \
                     &lt;nick!user|*!*&gt;@&lt;host|server&gt;"
    208     RPL_TRACENEWTYPE
                    "&lt;newtype&gt; 0 &lt;client name&gt;"
    261     RPL_TRACELOG
                    "File &lt;logfile&gt; &lt;debug level&gt;"

            - The RPL_TRACE* are all returned by the server in
              response to the TRACE message.  How many are
              returned is dependent on the the TRACE message and
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 53]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>              whether it was sent by an operator or not.  There
              is no predefined order for which occurs first.
              Replies RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and
              RPL_TRACEHANDSHAKE are all used for connections
              which have not been fully established and are either
              unknown, still attempting to connect or in the
              process of completing the 'server handshake'.
              RPL_TRACELINK is sent by any server which handles
              a TRACE message and has to pass it on to another
              server.  The list of RPL_TRACELINKs sent in
              response to a TRACE command traversing the IRC
              network should reflect the actual connectivity of
              the servers themselves along that path.
              RPL_TRACENEWTYPE is to be used for any connection
              which does not fit in the other categories but is
              being displayed anyway.

    211     RPL_STATSLINKINFO
                    "&lt;linkname&gt; &lt;sendq&gt; &lt;sent messages&gt; \
                     &lt;sent bytes&gt; &lt;received messages&gt; \
                     &lt;received bytes&gt; &lt;time open&gt;"
    212     RPL_STATSCOMMANDS
                    "&lt;command&gt; &lt;count&gt;"
    213     RPL_STATSCLINE
                    "C &lt;host&gt; * &lt;name&gt; &lt;port&gt; &lt;class&gt;"
    214     RPL_STATSNLINE
                    "N &lt;host&gt; * &lt;name&gt; &lt;port&gt; &lt;class&gt;"
    215     RPL_STATSILINE
                    "I &lt;host&gt; * &lt;host&gt; &lt;port&gt; &lt;class&gt;"
    216     RPL_STATSKLINE
                    "K &lt;host&gt; * &lt;username&gt; &lt;port&gt; &lt;class&gt;"
    218     RPL_STATSYLINE
                    "Y &lt;class&gt; &lt;ping frequency&gt; &lt;connect \
                     frequency&gt; &lt;max sendq&gt;"
    219     RPL_ENDOFSTATS
                    "&lt;stats letter&gt; :End of /STATS report"
    241     RPL_STATSLLINE
                    "L &lt;hostmask&gt; * &lt;servername&gt; &lt;maxdepth&gt;"
    242     RPL_STATSUPTIME
                    ":Server Up %d days %d:%02d:%02d"
    243     RPL_STATSOLINE
                    "O &lt;hostmask&gt; * &lt;name&gt;"
    244     RPL_STATSHLINE
                    "H &lt;hostmask&gt; * &lt;servername&gt;"

    221     RPL_UMODEIS
                    "&lt;user mode string&gt;"
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 54]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>                    - To answer a query about a client's own mode,
                      RPL_UMODEIS is sent back.

    251     RPL_LUSERCLIENT
                    ":There are &lt;integer&gt; users and &lt;integer&gt; \
                     invisible on &lt;integer&gt; servers"
    252     RPL_LUSEROP
                    "&lt;integer&gt; :operator(s) online"
    253     RPL_LUSERUNKNOWN
                    "&lt;integer&gt; :unknown connection(s)"
    254     RPL_LUSERCHANNELS
                    "&lt;integer&gt; :channels formed"
    255     RPL_LUSERME
                    ":I have &lt;integer&gt; clients and &lt;integer&gt; \
                      servers"

                    - In processing an LUSERS message, the server
                      sends a set of replies from RPL_LUSERCLIENT,
                      RPL_LUSEROP, RPL_USERUNKNOWN,
                      RPL_LUSERCHANNELS and RPL_LUSERME.  When
                      replying, a server must send back
                      RPL_LUSERCLIENT and RPL_LUSERME.  The other
                      replies are only sent back if a non-zero count
                      is found for them.

    256     RPL_ADMINME
                    "&lt;server&gt; :Administrative info"
    257     RPL_ADMINLOC1
                    ":&lt;admin info&gt;"
    258     RPL_ADMINLOC2
                    ":&lt;admin info&gt;"
    259     RPL_ADMINEMAIL
                    ":&lt;admin info&gt;"

                    - When replying to an ADMIN message, a server
                      is expected to use replies RLP_ADMINME
                      through to RPL_ADMINEMAIL and provide a text
                      message with each.  For RPL_ADMINLOC1 a
                      description of what city, state and country
                      the server is in is expected, followed by
                      details of the university and department
                      (RPL_ADMINLOC2) and finally the administrative
                      contact for the server (an email address here
                      is required) in RPL_ADMINEMAIL.
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 55]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>6.3 Reserved numerics.</p>

<p>These numerics are not described above since they fall into one of
   the following categories:</p>

<pre><code>    1. no longer in use;

    2. reserved for future planned use;

    3. in current use but are part of a non-generic 'feature' of
       the current IRC server.

    209     RPL_TRACECLASS          217     RPL_STATSQLINE
    231     RPL_SERVICEINFO         232     RPL_ENDOFSERVICES
    233     RPL_SERVICE             234     RPL_SERVLIST
    235     RPL_SERVLISTEND
    316     RPL_WHOISCHANOP         361     RPL_KILLDONE
    362     RPL_CLOSING             363     RPL_CLOSEEND
    373     RPL_INFOSTART           384     RPL_MYPORTIS
    466     ERR_YOUWILLBEBANNED     476     ERR_BADCHANMASK
    492     ERR_NOSERVICEHOST
</code></pre>

<ol>
<li><p>Client and server authentication</p>

<p>Clients and servers are both subject to the same level of
authentication.  For both, an IP number to hostname lookup (and
reverse check on this) is performed for all connections made to the
server.  Both connections are then subject to a password check (if
there is a password set for that connection).  These checks are
possible on all connections although the password check is only
commonly used with servers.</p>

<p>An additional check that is becoming of more and more common is that
of the username responsible for making the connection.  Finding the
username of the other end of the connection typically involves
connecting to an authentication server such as IDENT as described in
RFC 1413.</p>

<p>Given that without passwords it is not easy to reliably determine who
is on the other end of a network connection, use of passwords is
strongly recommended on inter-server connections in addition to any
other measures such as using an ident server.</p></li>
<li><p>Current implementations</p>

<p>The only current implementation of this protocol is the IRC server,
version 2.8. Earlier versions may implement some or all of the
commands described by this document with NOTICE messages replacing</p></li>
</ol>

<p>Oikarinen &amp; Reed                                               [Page 56]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>many of the numeric replies.  Unfortunately, due to backward
   compatibility requirements, the implementation of some parts of this
   document varies with what is laid out.  On notable difference is:</p>

<pre><code>    * recognition that any LF or CR anywhere in a message marks the
      end of that message (instead of requiring CR-LF);
</code></pre>

<p>The rest of this section deals with issues that are mostly of
   importance to those who wish to implement a server but some parts
   also apply directly to clients as well.</p>

<p>8.1 Network protocol: TCP - why it is best used here.</p>

<p>IRC has been implemented on top of TCP since TCP supplies a reliable
   network protocol which is well suited to this scale of conferencing.
   The use of multicast IP is an alternative, but it is not widely
   available or supported at the present time.</p>

<p>8.1.1 Support of Unix sockets</p>

<p>Given that Unix domain sockets allow listen/connect operations, the
   current implementation can be configured to listen and accept both
   client and server connections on a Unix domain socket.  These are
   recognized as sockets where the hostname starts with a &#8216;/&#8217;.</p>

<p>When providing any information about the connections on a Unix domain
   socket, the server is required to supplant the actual hostname in
   place of the pathname unless the actual socket name is being asked
   for.</p>

<p>8.2 Command Parsing</p>

<p>To provide useful &#8216;non-buffered&#8217; network IO for clients and servers,
   each connection is given its own private &#8216;input buffer&#8217; in which the
   results of the most recent read and parsing are kept.  A buffer size
   of 512 bytes is used so as to hold 1 full message, although, this
   will usually hold several commands.  The private buffer is parsed
   after every read operation for valid messages.  When dealing with
   multiple messages from one client in the buffer, care should be taken
   in case one happens to cause the client to be &#8216;removed&#8217;.</p>

<p>8.3 Message delivery</p>

<p>It is common to find network links saturated or hosts to which you
   are sending data unable to send data.  Although Unix typically
   handles this through the TCP window and internal buffers, the server
   often has large amounts of data to send (especially when a new
   server-server link forms) and the small buffers provided in the</p>

<p>Oikarinen &amp; Reed                                               [Page 57]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>kernel are not enough for the outgoing queue.  To alleviate this
   problem, a &#8220;send queue&#8221; is used as a FIFO queue for data to be sent.
   A typical &#8220;send queue&#8221; may grow to 200 Kbytes on a large IRC network
   with a slow network connection when a new server connects.</p>

<p>When polling its connections, a server will first read and parse all
   incoming data, queuing any data to be sent out. When all available
   input is processed, the queued data is sent. This reduces the number
   of write() system calls and helps TCP make bigger packets.</p>

<p>8.4 Connection &#8216;Liveness&#8217;</p>

<p>To detect when a connection has died or become unresponsive, the
   server must ping each of its connections that it doesn&#8217;t get a
   response from in a given amount of time.</p>

<p>If a connection doesn&#8217;t respond in time, its connection is closed
   using the appropriate procedures.  A connection is also dropped if
   its sendq grows beyond the maximum allowed, because it is better to
   close a slow connection than have a server process block.</p>

<p>8.5 Establishing a server to client connection</p>

<p>Upon connecting to an IRC server, a client is sent the MOTD (if
   present) as well as the current user/server count (as per the LUSER
   command).  The server is also required to give an unambiguous message
   to the client which states its name and version as well as any other
   introductory messages which may be deemed appropriate.</p>

<p>After dealing with this, the server must then send out the new user&#8217;s
   nickname and other information as supplied by itself (USER command)
   and as the server could discover (from DNS/authentication servers).
   The server must send this information out with NICK first followed by
   USER.</p>

<p>8.6 Establishing a server-server connection.</p>

<p>The process of establishing of a server-to-server connection is
   fraught with danger since there are many possible areas where
   problems can occur - the least of which are race conditions.</p>

<p>After a server has received a connection following by a PASS/SERVER
   pair which were recognised as being valid, the server should then
   reply with its own PASS/SERVER information for that connection as
   well as all of the other state information it knows about as
   described below.</p>

<p>When the initiating server receives a PASS/SERVER pair, it too then</p>

<p>Oikarinen &amp; Reed                                               [Page 58]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>checks that the server responding is authenticated properly before
   accepting the connection to be that server.</p>

<p>8.6.1 Server exchange of state information when connecting</p>

<p>The order of state information being exchanged between servers is
   essential.  The required order is as follows:</p>

<pre><code>    * all known other servers;

    * all known user information;

    * all known channel information.
</code></pre>

<p>Information regarding servers is sent via extra SERVER messages, user
   information with NICK/USER/MODE/JOIN messages and channels with MODE
   messages.</p>

<p>NOTE: channel topics are <em>NOT</em> exchanged here because the TOPIC
   command overwrites any old topic information, so at best, the two
   sides of the connection would exchange topics.</p>

<p>By passing the state information about servers first, any collisions
   with servers that already exist occur before nickname collisions due
   to a second server introducing a particular nickname.  Due to the IRC
   network only being able to exist as an acyclic graph, it may be
   possible that the network has already reconnected in another
   location, the place where the collision occurs indicating where the
   net needs to split.</p>

<p>8.7 Terminating server-client connections</p>

<p>When a client connection closes, a QUIT message is generated on
   behalf of the client by the server to which the client connected.  No
   other message is to be generated or used.</p>

<p>8.8 Terminating server-server connections</p>

<p>If a server-server connection is closed, either via a remotely
   generated SQUIT or &#8216;natural&#8217; causes, the rest of the connected IRC
   network must have its information updated with by the server which
   detected the closure.  The server then sends a list of SQUITs (one
   for each server behind that connection) and a list of QUITs (again,
   one for each client behind that connection).</p>

<p>Oikarinen &amp; Reed                                               [Page 59]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>8.9 Tracking nickname changes</p>

<p>All IRC servers are required to keep a history of recent nickname
   changes.  This is required to allow the server to have a chance of
   keeping in touch of things when nick-change race conditions occur
   with commands which manipulate them.  Commands which must trace nick
   changes are:</p>

<pre><code>    * KILL (the nick being killed)

    * MODE (+/- o,v)

    * KICK (the nick being kicked)
</code></pre>

<p>No other commands are to have nick changes checked for.</p>

<p>In the above cases, the server is required to first check for the
   existence of the nickname, then check its history to see who that
   nick currently belongs to (if anyone!).  This reduces the chances of
   race conditions but they can still occur with the server ending up
   affecting the wrong client.  When performing a change trace for an
   above command it is recommended that a time range be given and
   entries which are too old ignored.</p>

<p>For a reasonable history, a server should be able to keep previous
   nickname for every client it knows about if they all decided to
   change.  This size is limited by other factors (such as memory, etc).</p>

<p>8.10 Flood control of clients</p>

<p>With a large network of interconnected IRC servers, it is quite easy
   for any single client attached to the network to supply a continuous
   stream of messages that result in not only flooding the network, but
   also degrading the level of service provided to others.  Rather than
   require every &#8216;victim&#8217; to be provide their own protection, flood
   protection was written into the server and is applied to all clients
   except services.  The current algorithm is as follows:</p>

<pre><code>    * check to see if client's `message timer' is less than
      current time (set to be equal if it is);

    * read any data present from the client;

    * while the timer is less than ten seconds ahead of the current
      time, parse any present messages and penalize the client by
      2 seconds for each message;
</code></pre>

<p>which in essence means that the client may send 1 message every 2</p>

<p>Oikarinen &amp; Reed                                               [Page 60]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>seconds without being adversely affected.</p>

<p>8.11 Non-blocking lookups</p>

<p>In a real-time environment, it is essential that a server process do
   as little waiting as possible so that all the clients are serviced
   fairly.  Obviously this requires non-blocking IO on all network
   read/write operations.  For normal server connections, this was not
   difficult, but there are other support operations that may cause the
   server to block (such as disk reads).  Where possible, such activity
   should be performed with a short timeout.</p>

<p>8.11.1 Hostname (DNS) lookups</p>

<p>Using the standard resolver libraries from Berkeley and others has
   meant large delays in some cases where replies have timed out.  To
   avoid this, a separate set of DNS routines were written which were
   setup for non-blocking IO operations and then polled from within the
   main server IO loop.</p>

<p>8.11.2 Username (Ident) lookups</p>

<p>Although there are numerous ident libraries for use and inclusion
   into other programs, these caused problems since they operated in a
   synchronous manner and resulted in frequent delays.  Again the
   solution was to write a set of routines which would cooperate with
   the rest of the server and work using non-blocking IO.</p>

<p>8.12 Configuration File</p>

<p>To provide a flexible way of setting up and running the server, it is
   recommended that a configuration file be used which contains
   instructions to the server on the following:</p>

<pre><code>    * which hosts to accept client connections from;

    * which hosts to allow to connect as servers;

    * which hosts to connect to (both actively and
      passively);

    * information about where the server is (university,
      city/state, company are examples of this);

    * who is responsible for the server and an email address
      at which they can be contacted;

    * hostnames and passwords for clients which wish to be given
</code></pre>

<p>Oikarinen &amp; Reed                                               [Page 61]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<pre><code>      access to restricted operator commands.
</code></pre>

<p>In specifying hostnames, both domain names and use of the &#8216;dot&#8217;
   notation (127.0.0.1) should both be accepted.  It must be possible to
   specify the password to be used/accepted for all outgoing and
   incoming connections (although the only outgoing connections are
   those to other servers).</p>

<p>The above list is the minimum requirement for any server which wishes
   to make a connection with another server.  Other items which may be
   of use are:</p>

<pre><code>    * specifying which servers other server may introduce;

    * how deep a server branch is allowed to become;

    * hours during which clients may connect.
</code></pre>

<p>8.12.1 Allowing clients to connect</p>

<p>A server should use some sort of &#8216;access control list&#8217; (either in the
   configuration file or elsewhere) that is read at startup and used to
   decide what hosts clients may use to connect to it.</p>

<p>Both &#8216;deny&#8217; and &#8216;allow&#8217; should be implemented to provide the required
   flexibility for host access control.</p>

<p>8.12.2 Operators</p>

<p>The granting of operator privileges to a disruptive person can have
   dire consequences for the well-being of the IRC net in general due to
   the powers given to them.  Thus, the acquisition of such powers
   should not be very easy.  The current setup requires two &#8216;passwords&#8217;
   to be used although one of them is usually easy guessed.  Storage of
   oper passwords in configuration files is preferable to hard coding
   them in and should be stored in a crypted format (ie using crypt(3)
   from Unix) to prevent easy theft.</p>

<p>8.12.3 Allowing servers to connect</p>

<p>The interconnection of server is not a trivial matter: a bad
   connection can have a large impact on the usefulness of IRC.  Thus,
   each server should have a list of servers to which it may connect and
   which servers may connect to it.  Under no circumstances should a
   server allow an arbitrary host to connect as a server.  In addition
   to which servers may and may not connect, the configuration file
   should also store the password and other characteristics of that
   link.</p>

<p>Oikarinen &amp; Reed                                               [Page 62]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>8.12.4 Administrivia</p>

<p>To provide accurate and valid replies to the ADMIN command (see
   section 4.3.7), the server should find the relevant details in the
   configuration.</p>

<p>8.13 Channel membership</p>

<p>The current server allows any registered local user to join upto 10
   different channels.  There is no limit imposed on non-local users so
   that the server remains (reasonably) consistant with all others on a
   channel membership basis</p>

<ol>
<li><p>Current problems</p>

<p>There are a number of recognized problems with this protocol, all  of
which  hope to be solved sometime in the near future during its
rewrite.  Currently, work is underway to find working solutions to
these problems.</p></li>
</ol>

<p>9.1 Scalability</p>

<p>It is widely recognized that this protocol does not scale
   sufficiently well when used in a large arena.  The main problem comes
   from the requirement that all servers know about all other servers
   and users and that information regarding them be updated as soon as
   it changes.  It is also desirable to keep the number of servers low
   so that the path length between any two points is kept minimal and
   the spanning tree as strongly branched as possible.</p>

<p>9.2 Labels</p>

<p>The current IRC protocol has 3 types of labels: the nickname, the
   channel name and the server name.  Each of the three types has its
   own domain and no duplicates are allowed inside that domain.
   Currently, it is possible for users to pick the label for any of the
   three, resulting in collisions.  It is widely recognized that this
   needs reworking, with a plan for unique names for channels and nicks
   that don&#8217;t collide being desirable as well as a solution allowing a
   cyclic tree.</p>

<p>9.2.1 Nicknames</p>

<p>The idea of the nickname on IRC is very convenient for users to use
   when talking to each other outside of a channel, but there is only a
   finite nickname space and being what they are, its not uncommon for
   several people to want to use the same nick.  If a nickname is chosen
   by two people using this protocol, either one will not succeed or</p>

<p>Oikarinen &amp; Reed                                               [Page 63]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>both will removed by use of KILL (4.6.1).</p>

<p>9.2.2 Channels</p>

<p>The current channel layout requires that all servers know about all
   channels, their inhabitants and properties.  Besides not scaling
   well, the issue of privacy is also a concern.  A collision of
   channels is treated as an inclusive event (both people who create the
   new channel are considered to be members of it) rather than an
   exclusive one such as used to solve nickname collisions.</p>

<p>9.2.3 Servers</p>

<p>Although the number of servers is usually small relative to the
   number of users and channels, they two currently required to be known
   globally, either each one separately or hidden behind a mask.</p>

<p>9.3 Algorithms</p>

<p>In some places within the server code, it has not  been  possible  to
   avoid  N^2  algorithms  such  as  checking  the channel list of a set
   of clients.</p>

<p>In current server versions, there are no database consistency checks,
   each server assumes that a neighbouring server is correct.  This
   opens the door to large problems if a connecting server is buggy or
   otherwise tries to introduce contradictions to the existing net.</p>

<p>Currently, because of the lack of unique internal and global labels,
   there are a multitude of race conditions that exist.  These race
   conditions generally arise from the problem of it taking time for
   messages to traverse and effect the IRC network.  Even by changing to
   unique labels, there are problems with channel-related commands being
   disrupted.</p>

<ol>
<li><p>Current support and availability</p>

<pre><code>   Mailing lists for IRC related discussion:
        Future protocol: ircd-three-request@eff.org
        General discussion: operlist-request@eff.org

   Software implemenations
        cs.bu.edu:/irc
        nic.funet.fi:/pub/irc
        coombs.anu.edu.au:/pub/irc

   Newsgroup: alt.irc
</code></pre></li>
</ol>

<p>Oikarinen &amp; Reed                                               [Page 64]

RFC 1459              Internet Relay Chat Protocol              May 1993</p>

<p>Security Considerations</p>

<p>Security issues are discussed in sections 4.1, 4.1.1, 4.1.3, 5.5, and
   7.</p>

<ol>
<li><p>Authors&#8217; Addresses</p>

<p>Jarkko Oikarinen
Tuirantie 17 as 9
90500 OULU
FINLAND</p>

<p>Email: jto@tolsun.oulu.fi</p>

<p>Darren Reed
4 Pateman Street
Watsonia, Victoria 3087
Australia</p>

<p>Email: avalon@coombs.anu.edu.au</p></li>
</ol>

<p>Oikarinen &amp; Reed                                               [Page 65]
</p>

                            </div>
        
        <footer>

                        <p>All documents &copy; irchelp.org or original authors 2013 <br />Baked with <em><a href="http://bolt80.com/piecrust/">PieCrust</a> 1.3.0-dev</em>.</p>
                    </footer>
    </div>
    
        <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="/js/jquery.js"></script>
    <script src="/js/bootstrap-transition.js"></script>
    <script src="/js/bootstrap-alert.js"></script>
    <script src="/js/bootstrap-modal.js"></script>
    <script src="/js/bootstrap-dropdown.js"></script>
    <script src="/js/bootstrap-scrollspy.js"></script>
    <script src="/js/bootstrap-tab.js"></script>
    <script src="/js/bootstrap-tooltip.js"></script>
    <script src="/js/bootstrap-popover.js"></script>
    <script src="/js/bootstrap-button.js"></script>
    <script src="/js/bootstrap-collapse.js"></script>
    <script src="/js/bootstrap-carousel.js"></script>
    <script src="/js/bootstrap-typeahead.js"></script>
</body>
</html>
